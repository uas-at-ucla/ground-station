// source: ugv/ugv_messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ugv_ugv_config_pb = require('../ugv/ugv_config_pb.js');
goog.object.extend(proto, ugv_ugv_config_pb);
goog.exportSymbol('proto.ugv.DriveHeadingData', null, global);
goog.exportSymbol('proto.ugv.GroundCommand', null, global);
goog.exportSymbol('proto.ugv.GroundCommand.DataCase', null, global);
goog.exportSymbol('proto.ugv.GroundCommandType', null, global);
goog.exportSymbol('proto.ugv.GroundMessage', null, global);
goog.exportSymbol('proto.ugv.GroundMessage.GroundMessageCase', null, global);
goog.exportSymbol('proto.ugv.Location', null, global);
goog.exportSymbol('proto.ugv.TargetLocation', null, global);
goog.exportSymbol('proto.ugv.UGV_Message', null, global);
goog.exportSymbol('proto.ugv.UGV_Message.UgvMessageCase', null, global);
goog.exportSymbol('proto.ugv.UGV_State', null, global);
goog.exportSymbol('proto.ugv.UGV_Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ugv.TargetLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ugv.TargetLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ugv.TargetLocation.displayName = 'proto.ugv.TargetLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ugv.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ugv.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ugv.Location.displayName = 'proto.ugv.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ugv.UGV_Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ugv.UGV_Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ugv.UGV_Status.displayName = 'proto.ugv.UGV_Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ugv.UGV_Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ugv.UGV_Message.oneofGroups_);
};
goog.inherits(proto.ugv.UGV_Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ugv.UGV_Message.displayName = 'proto.ugv.UGV_Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ugv.DriveHeadingData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ugv.DriveHeadingData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ugv.DriveHeadingData.displayName = 'proto.ugv.DriveHeadingData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ugv.GroundCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ugv.GroundCommand.oneofGroups_);
};
goog.inherits(proto.ugv.GroundCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ugv.GroundCommand.displayName = 'proto.ugv.GroundCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ugv.GroundMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ugv.GroundMessage.oneofGroups_);
};
goog.inherits(proto.ugv.GroundMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ugv.GroundMessage.displayName = 'proto.ugv.GroundMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ugv.TargetLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.ugv.TargetLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ugv.TargetLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.TargetLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ugv.TargetLocation}
 */
proto.ugv.TargetLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ugv.TargetLocation;
  return proto.ugv.TargetLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ugv.TargetLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ugv.TargetLocation}
 */
proto.ugv.TargetLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ugv.TargetLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ugv.TargetLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ugv.TargetLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.TargetLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float latitude = 1;
 * @return {number}
 */
proto.ugv.TargetLocation.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.TargetLocation} returns this
 */
proto.ugv.TargetLocation.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float longitude = 2;
 * @return {number}
 */
proto.ugv.TargetLocation.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.TargetLocation} returns this
 */
proto.ugv.TargetLocation.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ugv.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.ugv.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ugv.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    fixQuality: jspb.Message.getFieldWithDefault(msg, 1, 0),
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    altitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ugv.Location}
 */
proto.ugv.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ugv.Location;
  return proto.ugv.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ugv.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ugv.Location}
 */
proto.ugv.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFixQuality(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ugv.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ugv.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ugv.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFixQuality();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getAltitude();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint32 fix_quality = 1;
 * @return {number}
 */
proto.ugv.Location.prototype.getFixQuality = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.Location} returns this
 */
proto.ugv.Location.prototype.setFixQuality = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float latitude = 2;
 * @return {number}
 */
proto.ugv.Location.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.Location} returns this
 */
proto.ugv.Location.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float longitude = 3;
 * @return {number}
 */
proto.ugv.Location.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.Location} returns this
 */
proto.ugv.Location.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float altitude = 4;
 * @return {number}
 */
proto.ugv.Location.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.Location} returns this
 */
proto.ugv.Location.prototype.setAltitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ugv.UGV_Status.prototype.toObject = function(opt_includeInstance) {
  return proto.ugv.UGV_Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ugv.UGV_Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.UGV_Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    location: (f = msg.getLocation()) && proto.ugv.Location.toObject(includeInstance, f),
    yawAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    pitchAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    rollAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    isStill: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ugv.UGV_Status}
 */
proto.ugv.UGV_Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ugv.UGV_Status;
  return proto.ugv.UGV_Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ugv.UGV_Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ugv.UGV_Status}
 */
proto.ugv.UGV_Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ugv.UGV_State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.ugv.Location;
      reader.readMessage(value,proto.ugv.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawAngle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchAngle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollAngle(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsStill(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ugv.UGV_Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ugv.UGV_Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ugv.UGV_Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.UGV_Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ugv.Location.serializeBinaryToWriter
    );
  }
  f = message.getYawAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPitchAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getRollAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getIsStill();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional UGV_State state = 1;
 * @return {!proto.ugv.UGV_State}
 */
proto.ugv.UGV_Status.prototype.getState = function() {
  return /** @type {!proto.ugv.UGV_State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ugv.UGV_State} value
 * @return {!proto.ugv.UGV_Status} returns this
 */
proto.ugv.UGV_Status.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Location location = 2;
 * @return {?proto.ugv.Location}
 */
proto.ugv.UGV_Status.prototype.getLocation = function() {
  return /** @type{?proto.ugv.Location} */ (
    jspb.Message.getWrapperField(this, proto.ugv.Location, 2));
};


/**
 * @param {?proto.ugv.Location|undefined} value
 * @return {!proto.ugv.UGV_Status} returns this
*/
proto.ugv.UGV_Status.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ugv.UGV_Status} returns this
 */
proto.ugv.UGV_Status.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ugv.UGV_Status.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float yaw_angle = 3;
 * @return {number}
 */
proto.ugv.UGV_Status.prototype.getYawAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.UGV_Status} returns this
 */
proto.ugv.UGV_Status.prototype.setYawAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float pitch_angle = 4;
 * @return {number}
 */
proto.ugv.UGV_Status.prototype.getPitchAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.UGV_Status} returns this
 */
proto.ugv.UGV_Status.prototype.setPitchAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float roll_angle = 5;
 * @return {number}
 */
proto.ugv.UGV_Status.prototype.getRollAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.UGV_Status} returns this
 */
proto.ugv.UGV_Status.prototype.setRollAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional bool is_still = 6;
 * @return {boolean}
 */
proto.ugv.UGV_Status.prototype.getIsStill = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ugv.UGV_Status} returns this
 */
proto.ugv.UGV_Status.prototype.setIsStill = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ugv.UGV_Message.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ugv.UGV_Message.UgvMessageCase = {
  UGV_MESSAGE_NOT_SET: 0,
  STATUS: 1,
  COMMAND_ACK: 2
};

/**
 * @return {proto.ugv.UGV_Message.UgvMessageCase}
 */
proto.ugv.UGV_Message.prototype.getUgvMessageCase = function() {
  return /** @type {proto.ugv.UGV_Message.UgvMessageCase} */(jspb.Message.computeOneofCase(this, proto.ugv.UGV_Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ugv.UGV_Message.prototype.toObject = function(opt_includeInstance) {
  return proto.ugv.UGV_Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ugv.UGV_Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.UGV_Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.ugv.UGV_Status.toObject(includeInstance, f),
    commandAck: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ugv.UGV_Message}
 */
proto.ugv.UGV_Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ugv.UGV_Message;
  return proto.ugv.UGV_Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ugv.UGV_Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ugv.UGV_Message}
 */
proto.ugv.UGV_Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ugv.UGV_Status;
      reader.readMessage(value,proto.ugv.UGV_Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommandAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ugv.UGV_Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ugv.UGV_Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ugv.UGV_Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.UGV_Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ugv.UGV_Status.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional UGV_Status status = 1;
 * @return {?proto.ugv.UGV_Status}
 */
proto.ugv.UGV_Message.prototype.getStatus = function() {
  return /** @type{?proto.ugv.UGV_Status} */ (
    jspb.Message.getWrapperField(this, proto.ugv.UGV_Status, 1));
};


/**
 * @param {?proto.ugv.UGV_Status|undefined} value
 * @return {!proto.ugv.UGV_Message} returns this
*/
proto.ugv.UGV_Message.prototype.setStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ugv.UGV_Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ugv.UGV_Message} returns this
 */
proto.ugv.UGV_Message.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ugv.UGV_Message.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 command_ack = 2;
 * @return {number}
 */
proto.ugv.UGV_Message.prototype.getCommandAck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.UGV_Message} returns this
 */
proto.ugv.UGV_Message.prototype.setCommandAck = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.ugv.UGV_Message.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ugv.UGV_Message} returns this
 */
proto.ugv.UGV_Message.prototype.clearCommandAck = function() {
  return jspb.Message.setOneofField(this, 2, proto.ugv.UGV_Message.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ugv.UGV_Message.prototype.hasCommandAck = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ugv.DriveHeadingData.prototype.toObject = function(opt_includeInstance) {
  return proto.ugv.DriveHeadingData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ugv.DriveHeadingData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.DriveHeadingData.toObject = function(includeInstance, msg) {
  var f, obj = {
    heading: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    power: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ugv.DriveHeadingData}
 */
proto.ugv.DriveHeadingData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ugv.DriveHeadingData;
  return proto.ugv.DriveHeadingData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ugv.DriveHeadingData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ugv.DriveHeadingData}
 */
proto.ugv.DriveHeadingData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeading(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ugv.DriveHeadingData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ugv.DriveHeadingData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ugv.DriveHeadingData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.DriveHeadingData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeading();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPower();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float heading = 1;
 * @return {number}
 */
proto.ugv.DriveHeadingData.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.DriveHeadingData} returns this
 */
proto.ugv.DriveHeadingData.prototype.setHeading = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float power = 2;
 * @return {number}
 */
proto.ugv.DriveHeadingData.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.DriveHeadingData} returns this
 */
proto.ugv.DriveHeadingData.prototype.setPower = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ugv.GroundCommand.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.ugv.GroundCommand.DataCase = {
  DATA_NOT_SET: 0,
  DRIVE_HEADING: 3,
  TARGET_LOCATION: 4,
  CONFIG: 5
};

/**
 * @return {proto.ugv.GroundCommand.DataCase}
 */
proto.ugv.GroundCommand.prototype.getDataCase = function() {
  return /** @type {proto.ugv.GroundCommand.DataCase} */(jspb.Message.computeOneofCase(this, proto.ugv.GroundCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ugv.GroundCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.ugv.GroundCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ugv.GroundCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.GroundCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    driveHeading: (f = msg.getDriveHeading()) && proto.ugv.DriveHeadingData.toObject(includeInstance, f),
    targetLocation: (f = msg.getTargetLocation()) && proto.ugv.TargetLocation.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && ugv_ugv_config_pb.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ugv.GroundCommand}
 */
proto.ugv.GroundCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ugv.GroundCommand;
  return proto.ugv.GroundCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ugv.GroundCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ugv.GroundCommand}
 */
proto.ugv.GroundCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.ugv.GroundCommandType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.ugv.DriveHeadingData;
      reader.readMessage(value,proto.ugv.DriveHeadingData.deserializeBinaryFromReader);
      msg.setDriveHeading(value);
      break;
    case 4:
      var value = new proto.ugv.TargetLocation;
      reader.readMessage(value,proto.ugv.TargetLocation.deserializeBinaryFromReader);
      msg.setTargetLocation(value);
      break;
    case 5:
      var value = new ugv_ugv_config_pb.Config;
      reader.readMessage(value,ugv_ugv_config_pb.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ugv.GroundCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ugv.GroundCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ugv.GroundCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.GroundCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDriveHeading();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ugv.DriveHeadingData.serializeBinaryToWriter
    );
  }
  f = message.getTargetLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ugv.TargetLocation.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      ugv_ugv_config_pb.Config.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.ugv.GroundCommand.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.GroundCommand} returns this
 */
proto.ugv.GroundCommand.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GroundCommandType type = 2;
 * @return {!proto.ugv.GroundCommandType}
 */
proto.ugv.GroundCommand.prototype.getType = function() {
  return /** @type {!proto.ugv.GroundCommandType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ugv.GroundCommandType} value
 * @return {!proto.ugv.GroundCommand} returns this
 */
proto.ugv.GroundCommand.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional DriveHeadingData drive_heading = 3;
 * @return {?proto.ugv.DriveHeadingData}
 */
proto.ugv.GroundCommand.prototype.getDriveHeading = function() {
  return /** @type{?proto.ugv.DriveHeadingData} */ (
    jspb.Message.getWrapperField(this, proto.ugv.DriveHeadingData, 3));
};


/**
 * @param {?proto.ugv.DriveHeadingData|undefined} value
 * @return {!proto.ugv.GroundCommand} returns this
*/
proto.ugv.GroundCommand.prototype.setDriveHeading = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ugv.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ugv.GroundCommand} returns this
 */
proto.ugv.GroundCommand.prototype.clearDriveHeading = function() {
  return this.setDriveHeading(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ugv.GroundCommand.prototype.hasDriveHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TargetLocation target_location = 4;
 * @return {?proto.ugv.TargetLocation}
 */
proto.ugv.GroundCommand.prototype.getTargetLocation = function() {
  return /** @type{?proto.ugv.TargetLocation} */ (
    jspb.Message.getWrapperField(this, proto.ugv.TargetLocation, 4));
};


/**
 * @param {?proto.ugv.TargetLocation|undefined} value
 * @return {!proto.ugv.GroundCommand} returns this
*/
proto.ugv.GroundCommand.prototype.setTargetLocation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ugv.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ugv.GroundCommand} returns this
 */
proto.ugv.GroundCommand.prototype.clearTargetLocation = function() {
  return this.setTargetLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ugv.GroundCommand.prototype.hasTargetLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Config config = 5;
 * @return {?proto.ugv.Config}
 */
proto.ugv.GroundCommand.prototype.getConfig = function() {
  return /** @type{?proto.ugv.Config} */ (
    jspb.Message.getWrapperField(this, ugv_ugv_config_pb.Config, 5));
};


/**
 * @param {?proto.ugv.Config|undefined} value
 * @return {!proto.ugv.GroundCommand} returns this
*/
proto.ugv.GroundCommand.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ugv.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ugv.GroundCommand} returns this
 */
proto.ugv.GroundCommand.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ugv.GroundCommand.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ugv.GroundMessage.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.ugv.GroundMessage.GroundMessageCase = {
  GROUND_MESSAGE_NOT_SET: 0,
  COMMAND: 1
};

/**
 * @return {proto.ugv.GroundMessage.GroundMessageCase}
 */
proto.ugv.GroundMessage.prototype.getGroundMessageCase = function() {
  return /** @type {proto.ugv.GroundMessage.GroundMessageCase} */(jspb.Message.computeOneofCase(this, proto.ugv.GroundMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ugv.GroundMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ugv.GroundMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ugv.GroundMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.GroundMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: (f = msg.getCommand()) && proto.ugv.GroundCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ugv.GroundMessage}
 */
proto.ugv.GroundMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ugv.GroundMessage;
  return proto.ugv.GroundMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ugv.GroundMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ugv.GroundMessage}
 */
proto.ugv.GroundMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ugv.GroundCommand;
      reader.readMessage(value,proto.ugv.GroundCommand.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ugv.GroundMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ugv.GroundMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ugv.GroundMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.GroundMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ugv.GroundCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional GroundCommand command = 1;
 * @return {?proto.ugv.GroundCommand}
 */
proto.ugv.GroundMessage.prototype.getCommand = function() {
  return /** @type{?proto.ugv.GroundCommand} */ (
    jspb.Message.getWrapperField(this, proto.ugv.GroundCommand, 1));
};


/**
 * @param {?proto.ugv.GroundCommand|undefined} value
 * @return {!proto.ugv.GroundMessage} returns this
*/
proto.ugv.GroundMessage.prototype.setCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ugv.GroundMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ugv.GroundMessage} returns this
 */
proto.ugv.GroundMessage.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ugv.GroundMessage.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.ugv.UGV_State = {
  STATE_IDLE: 0,
  STATE_AQUIRING: 1,
  STATE_DRIVING: 2,
  STATE_FINISHED: 3,
  STATE_TEST: 4,
  STATE_FLIPPING: 5,
  STATE_TURNING: 6,
  STATE_DRIVE_HEADING: 7
};

/**
 * @enum {number}
 */
proto.ugv.GroundCommandType = {
  CMD_DISABLE: 0,
  CMD_DRIVE_TO_TARGET: 1,
  CMD_TEST: 2,
  CMD_DRIVE_HEADING: 3,
  CMD_SET_TARGET: 4,
  CMD_SET_CONFIG: 5,
  CMD_GET_STATUS: 6,
  CMD_PING: 7
};

goog.object.extend(exports, proto.ugv);
