{
  "name": "FlightDeck",
  "version": "0.1.0",
  "private": true,
  "main": "electron/electron.js",
  "homepage": "./",
  "//homepageComment": "This is required for React to use the correct path for file:// requests in production",
  "scripts": {
    "react-start": "cross-env EXTEND_ESLINT=true BROWSER=none react-scripts start",
    "electron-start": "npm run electron-build && cross-env ELECTRON_IS_DEV=1 electron .",
    "start": "concurrently \"npm run react-start\" \"wait-on http://localhost:3000/ && npm run electron-start\"",
    "start-web": "cross-env EXTEND_ESLINT=true PORT=3001 react-scripts start",
    "start-prod": "cross-env ELECTRON_IS_DEV=0 electron .",
    "react-build": "cross-env EXTEND_ESLINT=true CI=false react-scripts build",
    "electron-build": "tsc electron/electron.ts",
    "build": "npm run electron-build && npm run react-build",
    "test": "cross-env EXTEND_ESLINT=true react-scripts test --env=jsdom",
    "lint": "eslint ./src ./electron --ext .ts,.tsx",
    "eject": "react-scripts eject",
    "package": "npm run build && electron-packager . --overwrite --asar.unpackDir=\"electron/files\" --out=release-builds --ignore=\"^/([^benp]|public|package-lock.json)\" --arch=x64",
    "package-mac": "npm run package -- --platform=darwin",
    "package-win": "npm run package -- --platform=win32",
    "package-linux": "npm run package -- --platform=linux"
  },
  "//scriptsComments": {
    "server-start": "Start the ground server",
    "react-start": "Start the React app in development mode, which will auto-reload the app when files are changed.",
    "electron-start": "Start electron in development mode, i.e. use the React app running on http://localhost:3000",
    "start": "Concurrently run react-start and electron-start",
    "start-web": "Start the React app in development mode on port 3001 and automatically open in your web Browser. Electron-dependent features will be missing in the browser.",
    "start-prod": "Given that `npm run build` has been run, run the app in production mode, i.e. run electron and use build/index.html as the entry point",
    "react-build": "Compile the React app into the build folder",
    "electron-build": "Compile the electron/electron.ts TypeScript file into JavaScript",
    "build": "Build the React app and the electron script",
    "test": "Probably does something, but we haven't written any tests yet",
    "lint": "Check for code errors/warnings. These should automatically show in the VS Code editor, so you usually don't need to run this command.",
    "eject": "Don't do this",
    "package": "Create standalone executable for your computer's platform. The --ignore option ignores everything except ./build, ./electron, ./node_modules, and ./package.json, the only things necessary for the executable. It's a little weird since there's no 'include' option.",
    "package-<platform>": "Create standalone executable for a specific platform. Platform-specific command line options for electron-packager can be set."
  },
  "dependencies": {
    "electron-is-dev": "^1.1.0"
  },
  "dependenciesComments": {
    "electron-is-dev": "Detect if electron is running in development mode"
  },
  "devDependencies": {
    "@react-google-maps/api": "^1.8.3",
    "@types/googlemaps": "^3.39.1",
    "@types/jest": "^24.0.25",
    "@types/node": "^12.12.24",
    "@types/react": "^16.9.17",
    "@types/react-dom": "^16.9.4",
    "@types/react-easy-crop": "^1.16.0",
    "@types/react-redux": "^7.1.5",
    "@types/react-router-dom": "^5.1.3",
    "@types/react-select": "^3.0.9",
    "@types/reactstrap": "^8.2.0",
    "@types/shortid": "0.0.29",
    "@types/socket.io-client": "^1.4.32",
    "array-move": "^2.2.1",
    "axios": "^0.19.1",
    "bootstrap": "^4.4.1",
    "check-dependencies": "^1.1.0",
    "concurrently": "^5.1.0",
    "cross-env": "^7.0.1",
    "electron": "^7.1.9",
    "electron-devtools-installer": "^2.2.4",
    "electron-packager": "^14.1.1",
    "eslint-plugin-react": "^7.17.0",
    "eslint-plugin-react-hooks": "^1.7.0",
    "font-awesome": "^4.7.0",
    "google_maps_js_api": "github:uas-at-ucla-dependencies/google_maps_js_api#1.4",
    "image-clipper": "^0.4.4",
    "immer": "^5.2.1",
    "react": "^16.12.0",
    "react-dom": "^16.12.0",
    "react-easy-crop": "^1.17.1",
    "react-redux": "^7.1.3",
    "react-router-dom": "^5.1.2",
    "react-scripts": "^3.3.0",
    "react-select": "^3.0.8",
    "react-sortable-hoc": "^1.10.1",
    "reactstrap": "^8.2.0",
    "redux": "^4.0.5",
    "redux-devtools-extension": "^2.13.8",
    "reselect": "^4.0.0",
    "reselect-tools": "0.0.7",
    "sanitize.css": "^11.0.0",
    "shortid": "^2.2.15",
    "socket.io-client": "^2.3.0",
    "three": "^0.112.1",
    "typescript": "^3.8.3",
    "wait-on": "^3.3.0"
  },
  "//devDependenciesComments": {
    "NOTE": "devDependencies aren't included in node_modules in the packaged app. Development tools and dependencies for the React app should go here, since those dependencies get compiled into the React build.",
    "@types/<package>": "TypeScript type definitions for various packages",
    "bootstrap": "HTML layout & style library",
    "check-dependencies": "Check if all the dependencies are installed according this file - much faster than just running `npm install`",
    "electron": "PRIMARY LIBRARY. Chromium, but modified to provide access to Node.js from a web frontend and enable building cross-platform desktop apps",
    "electron-devtools-installer": "Install Chrome extensions in Electron",
    "electron-packager": "Package the app into an executable for any platform",
    "eslint-plugin-react": "ESLint plugin for React linting rules",
    "font-awesome": "Font that contains icons instead of letters. There are plenty of these out there; Font Awesome 4.7 is pretty good, but out of date, so we could upgrade.",
    "google_maps_js_api": "UAS@UCLA private GitHub repo for the Google Maps API, so we can use it offline",
    "image-clipper": "Crop images",
    "immer": "Make it easy to generate the next state in Redux reducers",
    "react": "PRIMARY LIBRARY. UI framework",
    "react-dom": "Part of the React framework",
    "react-easy-crop": "Image cropping UI (doesn't actually crop images)",
    "react-google-maps": "Abstraction of the Google Maps API through React Components",
    "react-redux": "Connect React and Redux",
    "react-router-dom": "Display content based on the URL path",
    "react-scripts": "Tools for running and building the React app",
    "react-select": "Dropdown selector library",
    "react-sortable-hoc": "Sortable (click and drag) list library",
    "reactstrap": "Abstraction of Bootstrap through React Components",
    "redux": "PRIMARY LIBRARY. State management library - manages how all the data in the app is updated and used",
    "redux-devtools-extension": "Helps setup the Redux Devtools Chrome extension",
    "reselect": "Helps compute derived data from the state, using memoization",
    "reselect-map": "Finer-grained memoization for objects and arrays",
    "reselect-tools": "Helps setup the Reselect Devtools Chrome extension",
    "sanitize.css": "Provides consistent, cross-browser default styling of HTML",
    "shortid": "Generate simple unique IDs. If rendering with a list of objects, this can help generate unique IDs to pass to the 'key' prop required by React",
    "socket.io-client": "Exchange messages with a Socket.IO server, the ground-station server in our case",
    "three": "3D graphics library. Used for the Navball",
    "wait-on": "Wait for a URL to be up. Used to wait for the React app to be ready before starting Electron in `npm start`"
  },
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ],
  "//browserslistComment": "The browserslist is automatically added by create-react-app"
}
