// source: drone/mission_commands.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.drone.BombDropCommand', null, global);
goog.exportSymbol('proto.drone.Command', null, global);
goog.exportSymbol('proto.drone.Command.CommandCase', null, global);
goog.exportSymbol('proto.drone.FlyThroughCommand', null, global);
goog.exportSymbol('proto.drone.GotoCommand', null, global);
goog.exportSymbol('proto.drone.GotoRawCommand', null, global);
goog.exportSymbol('proto.drone.GroundData', null, global);
goog.exportSymbol('proto.drone.GroundData.DataCase', null, global);
goog.exportSymbol('proto.drone.Mission', null, global);
goog.exportSymbol('proto.drone.MovingObstacle', null, global);
goog.exportSymbol('proto.drone.NothingCommand', null, global);
goog.exportSymbol('proto.drone.Obstacles', null, global);
goog.exportSymbol('proto.drone.OffAxisCommand', null, global);
goog.exportSymbol('proto.drone.Position2D', null, global);
goog.exportSymbol('proto.drone.Position3D', null, global);
goog.exportSymbol('proto.drone.SleepCommand', null, global);
goog.exportSymbol('proto.drone.StaticObstacle', null, global);
goog.exportSymbol('proto.drone.SurveyCommand', null, global);
goog.exportSymbol('proto.drone.WaypointCommand', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.Position2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.Position2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.Position2D.displayName = 'proto.drone.Position2D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.Position3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.Position3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.Position3D.displayName = 'proto.drone.Position3D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.WaypointCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.WaypointCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.WaypointCommand.displayName = 'proto.drone.WaypointCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.FlyThroughCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.FlyThroughCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.FlyThroughCommand.displayName = 'proto.drone.FlyThroughCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.BombDropCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.BombDropCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.BombDropCommand.displayName = 'proto.drone.BombDropCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.SurveyCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.drone.SurveyCommand.repeatedFields_, null);
};
goog.inherits(proto.drone.SurveyCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.SurveyCommand.displayName = 'proto.drone.SurveyCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.OffAxisCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.OffAxisCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.OffAxisCommand.displayName = 'proto.drone.OffAxisCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.NothingCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.NothingCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.NothingCommand.displayName = 'proto.drone.NothingCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.SleepCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.SleepCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.SleepCommand.displayName = 'proto.drone.SleepCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.GotoCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.GotoCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.GotoCommand.displayName = 'proto.drone.GotoCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.GotoRawCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.GotoRawCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.GotoRawCommand.displayName = 'proto.drone.GotoRawCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.drone.Command.oneofGroups_);
};
goog.inherits(proto.drone.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.Command.displayName = 'proto.drone.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.Mission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.drone.Mission.repeatedFields_, null);
};
goog.inherits(proto.drone.Mission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.Mission.displayName = 'proto.drone.Mission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.StaticObstacle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.StaticObstacle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.StaticObstacle.displayName = 'proto.drone.StaticObstacle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.MovingObstacle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.MovingObstacle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.MovingObstacle.displayName = 'proto.drone.MovingObstacle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.Obstacles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.drone.Obstacles.repeatedFields_, null);
};
goog.inherits(proto.drone.Obstacles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.Obstacles.displayName = 'proto.drone.Obstacles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.GroundData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.drone.GroundData.oneofGroups_);
};
goog.inherits(proto.drone.GroundData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.GroundData.displayName = 'proto.drone.GroundData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.Position2D.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.Position2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.Position2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Position2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.Position2D}
 */
proto.drone.Position2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.Position2D;
  return proto.drone.Position2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.Position2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.Position2D}
 */
proto.drone.Position2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.Position2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.Position2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.Position2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Position2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * required double latitude = 1;
 * @return {number}
 */
proto.drone.Position2D.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Position2D} returns this
 */
proto.drone.Position2D.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Position2D} returns this
 */
proto.drone.Position2D.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Position2D.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double longitude = 2;
 * @return {number}
 */
proto.drone.Position2D.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Position2D} returns this
 */
proto.drone.Position2D.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Position2D} returns this
 */
proto.drone.Position2D.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Position2D.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.Position3D.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.Position3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.Position3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Position3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    altitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.Position3D}
 */
proto.drone.Position3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.Position3D;
  return proto.drone.Position3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.Position3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.Position3D}
 */
proto.drone.Position3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.Position3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.Position3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.Position3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Position3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * required double latitude = 1;
 * @return {number}
 */
proto.drone.Position3D.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Position3D} returns this
 */
proto.drone.Position3D.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Position3D} returns this
 */
proto.drone.Position3D.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Position3D.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double longitude = 2;
 * @return {number}
 */
proto.drone.Position3D.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Position3D} returns this
 */
proto.drone.Position3D.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Position3D} returns this
 */
proto.drone.Position3D.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Position3D.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double altitude = 3;
 * @return {number}
 */
proto.drone.Position3D.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Position3D} returns this
 */
proto.drone.Position3D.prototype.setAltitude = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Position3D} returns this
 */
proto.drone.Position3D.prototype.clearAltitude = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Position3D.prototype.hasAltitude = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.WaypointCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.WaypointCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.WaypointCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.WaypointCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    goal: (f = msg.getGoal()) && proto.drone.Position3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.WaypointCommand}
 */
proto.drone.WaypointCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.WaypointCommand;
  return proto.drone.WaypointCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.WaypointCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.WaypointCommand}
 */
proto.drone.WaypointCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Position3D;
      reader.readMessage(value,proto.drone.Position3D.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.WaypointCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.WaypointCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.WaypointCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.WaypointCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Position3D.serializeBinaryToWriter
    );
  }
};


/**
 * required Position3D goal = 1;
 * @return {!proto.drone.Position3D}
 */
proto.drone.WaypointCommand.prototype.getGoal = function() {
  return /** @type{!proto.drone.Position3D} */ (
    jspb.Message.getWrapperField(this, proto.drone.Position3D, 1, 1));
};


/**
 * @param {!proto.drone.Position3D} value
 * @return {!proto.drone.WaypointCommand} returns this
*/
proto.drone.WaypointCommand.prototype.setGoal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.WaypointCommand} returns this
 */
proto.drone.WaypointCommand.prototype.clearGoal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.WaypointCommand.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.FlyThroughCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.FlyThroughCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.FlyThroughCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.FlyThroughCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    goal: (f = msg.getGoal()) && proto.drone.Position3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.FlyThroughCommand}
 */
proto.drone.FlyThroughCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.FlyThroughCommand;
  return proto.drone.FlyThroughCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.FlyThroughCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.FlyThroughCommand}
 */
proto.drone.FlyThroughCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Position3D;
      reader.readMessage(value,proto.drone.Position3D.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.FlyThroughCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.FlyThroughCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.FlyThroughCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.FlyThroughCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Position3D.serializeBinaryToWriter
    );
  }
};


/**
 * required Position3D goal = 1;
 * @return {!proto.drone.Position3D}
 */
proto.drone.FlyThroughCommand.prototype.getGoal = function() {
  return /** @type{!proto.drone.Position3D} */ (
    jspb.Message.getWrapperField(this, proto.drone.Position3D, 1, 1));
};


/**
 * @param {!proto.drone.Position3D} value
 * @return {!proto.drone.FlyThroughCommand} returns this
*/
proto.drone.FlyThroughCommand.prototype.setGoal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.FlyThroughCommand} returns this
 */
proto.drone.FlyThroughCommand.prototype.clearGoal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.FlyThroughCommand.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.BombDropCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.BombDropCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.BombDropCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.BombDropCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    dropZone: (f = msg.getDropZone()) && proto.drone.Position2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.BombDropCommand}
 */
proto.drone.BombDropCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.BombDropCommand;
  return proto.drone.BombDropCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.BombDropCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.BombDropCommand}
 */
proto.drone.BombDropCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Position2D;
      reader.readMessage(value,proto.drone.Position2D.deserializeBinaryFromReader);
      msg.setDropZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.BombDropCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.BombDropCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.BombDropCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.BombDropCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDropZone();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Position2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Position2D drop_zone = 1;
 * @return {!proto.drone.Position2D}
 */
proto.drone.BombDropCommand.prototype.getDropZone = function() {
  return /** @type{!proto.drone.Position2D} */ (
    jspb.Message.getWrapperField(this, proto.drone.Position2D, 1, 1));
};


/**
 * @param {!proto.drone.Position2D} value
 * @return {!proto.drone.BombDropCommand} returns this
*/
proto.drone.BombDropCommand.prototype.setDropZone = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.BombDropCommand} returns this
 */
proto.drone.BombDropCommand.prototype.clearDropZone = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.BombDropCommand.prototype.hasDropZone = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.drone.SurveyCommand.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.SurveyCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.SurveyCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.SurveyCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.SurveyCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    surveyPolygonList: jspb.Message.toObjectList(msg.getSurveyPolygonList(),
    proto.drone.Position2D.toObject, includeInstance),
    altitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.SurveyCommand}
 */
proto.drone.SurveyCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.SurveyCommand;
  return proto.drone.SurveyCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.SurveyCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.SurveyCommand}
 */
proto.drone.SurveyCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Position2D;
      reader.readMessage(value,proto.drone.Position2D.deserializeBinaryFromReader);
      msg.addSurveyPolygon(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.SurveyCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.SurveyCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.SurveyCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.SurveyCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurveyPolygonList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.drone.Position2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * repeated Position2D survey_polygon = 1;
 * @return {!Array<!proto.drone.Position2D>}
 */
proto.drone.SurveyCommand.prototype.getSurveyPolygonList = function() {
  return /** @type{!Array<!proto.drone.Position2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.drone.Position2D, 1));
};


/**
 * @param {!Array<!proto.drone.Position2D>} value
 * @return {!proto.drone.SurveyCommand} returns this
*/
proto.drone.SurveyCommand.prototype.setSurveyPolygonList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.drone.Position2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.drone.Position2D}
 */
proto.drone.SurveyCommand.prototype.addSurveyPolygon = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.drone.Position2D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.drone.SurveyCommand} returns this
 */
proto.drone.SurveyCommand.prototype.clearSurveyPolygonList = function() {
  return this.setSurveyPolygonList([]);
};


/**
 * required double altitude = 2;
 * @return {number}
 */
proto.drone.SurveyCommand.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.SurveyCommand} returns this
 */
proto.drone.SurveyCommand.prototype.setAltitude = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.SurveyCommand} returns this
 */
proto.drone.SurveyCommand.prototype.clearAltitude = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.SurveyCommand.prototype.hasAltitude = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.OffAxisCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.OffAxisCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.OffAxisCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.OffAxisCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    goal: (f = msg.getGoal()) && proto.drone.Position3D.toObject(includeInstance, f),
    subjectLocation: (f = msg.getSubjectLocation()) && proto.drone.Position2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.OffAxisCommand}
 */
proto.drone.OffAxisCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.OffAxisCommand;
  return proto.drone.OffAxisCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.OffAxisCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.OffAxisCommand}
 */
proto.drone.OffAxisCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Position3D;
      reader.readMessage(value,proto.drone.Position3D.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    case 2:
      var value = new proto.drone.Position2D;
      reader.readMessage(value,proto.drone.Position2D.deserializeBinaryFromReader);
      msg.setSubjectLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.OffAxisCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.OffAxisCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.OffAxisCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.OffAxisCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Position3D.serializeBinaryToWriter
    );
  }
  f = message.getSubjectLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.drone.Position2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Position3D goal = 1;
 * @return {!proto.drone.Position3D}
 */
proto.drone.OffAxisCommand.prototype.getGoal = function() {
  return /** @type{!proto.drone.Position3D} */ (
    jspb.Message.getWrapperField(this, proto.drone.Position3D, 1, 1));
};


/**
 * @param {!proto.drone.Position3D} value
 * @return {!proto.drone.OffAxisCommand} returns this
*/
proto.drone.OffAxisCommand.prototype.setGoal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.OffAxisCommand} returns this
 */
proto.drone.OffAxisCommand.prototype.clearGoal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.OffAxisCommand.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Position2D subject_location = 2;
 * @return {!proto.drone.Position2D}
 */
proto.drone.OffAxisCommand.prototype.getSubjectLocation = function() {
  return /** @type{!proto.drone.Position2D} */ (
    jspb.Message.getWrapperField(this, proto.drone.Position2D, 2, 1));
};


/**
 * @param {!proto.drone.Position2D} value
 * @return {!proto.drone.OffAxisCommand} returns this
*/
proto.drone.OffAxisCommand.prototype.setSubjectLocation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.OffAxisCommand} returns this
 */
proto.drone.OffAxisCommand.prototype.clearSubjectLocation = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.OffAxisCommand.prototype.hasSubjectLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.NothingCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.NothingCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.NothingCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.NothingCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.NothingCommand}
 */
proto.drone.NothingCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.NothingCommand;
  return proto.drone.NothingCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.NothingCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.NothingCommand}
 */
proto.drone.NothingCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.NothingCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.NothingCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.NothingCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.NothingCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.SleepCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.SleepCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.SleepCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.SleepCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.SleepCommand}
 */
proto.drone.SleepCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.SleepCommand;
  return proto.drone.SleepCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.SleepCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.SleepCommand}
 */
proto.drone.SleepCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.SleepCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.SleepCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.SleepCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.SleepCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * required double time = 1;
 * @return {number}
 */
proto.drone.SleepCommand.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.SleepCommand} returns this
 */
proto.drone.SleepCommand.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.SleepCommand} returns this
 */
proto.drone.SleepCommand.prototype.clearTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.SleepCommand.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.GotoCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.GotoCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.GotoCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GotoCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    goal: (f = msg.getGoal()) && proto.drone.Position3D.toObject(includeInstance, f),
    comeToStop: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.GotoCommand}
 */
proto.drone.GotoCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.GotoCommand;
  return proto.drone.GotoCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.GotoCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.GotoCommand}
 */
proto.drone.GotoCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Position3D;
      reader.readMessage(value,proto.drone.Position3D.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setComeToStop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.GotoCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.GotoCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.GotoCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GotoCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Position3D.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required Position3D goal = 1;
 * @return {!proto.drone.Position3D}
 */
proto.drone.GotoCommand.prototype.getGoal = function() {
  return /** @type{!proto.drone.Position3D} */ (
    jspb.Message.getWrapperField(this, proto.drone.Position3D, 1, 1));
};


/**
 * @param {!proto.drone.Position3D} value
 * @return {!proto.drone.GotoCommand} returns this
*/
proto.drone.GotoCommand.prototype.setGoal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.GotoCommand} returns this
 */
proto.drone.GotoCommand.prototype.clearGoal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GotoCommand.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool come_to_stop = 2;
 * @return {boolean}
 */
proto.drone.GotoCommand.prototype.getComeToStop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.GotoCommand} returns this
 */
proto.drone.GotoCommand.prototype.setComeToStop = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.GotoCommand} returns this
 */
proto.drone.GotoCommand.prototype.clearComeToStop = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GotoCommand.prototype.hasComeToStop = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.GotoRawCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.GotoRawCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.GotoRawCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GotoRawCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    goal: (f = msg.getGoal()) && proto.drone.Position3D.toObject(includeInstance, f),
    comeToStop: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.GotoRawCommand}
 */
proto.drone.GotoRawCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.GotoRawCommand;
  return proto.drone.GotoRawCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.GotoRawCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.GotoRawCommand}
 */
proto.drone.GotoRawCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Position3D;
      reader.readMessage(value,proto.drone.Position3D.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setComeToStop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.GotoRawCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.GotoRawCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.GotoRawCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GotoRawCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Position3D.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required Position3D goal = 1;
 * @return {!proto.drone.Position3D}
 */
proto.drone.GotoRawCommand.prototype.getGoal = function() {
  return /** @type{!proto.drone.Position3D} */ (
    jspb.Message.getWrapperField(this, proto.drone.Position3D, 1, 1));
};


/**
 * @param {!proto.drone.Position3D} value
 * @return {!proto.drone.GotoRawCommand} returns this
*/
proto.drone.GotoRawCommand.prototype.setGoal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.GotoRawCommand} returns this
 */
proto.drone.GotoRawCommand.prototype.clearGoal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GotoRawCommand.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool come_to_stop = 2;
 * @return {boolean}
 */
proto.drone.GotoRawCommand.prototype.getComeToStop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.GotoRawCommand} returns this
 */
proto.drone.GotoRawCommand.prototype.setComeToStop = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.GotoRawCommand} returns this
 */
proto.drone.GotoRawCommand.prototype.clearComeToStop = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GotoRawCommand.prototype.hasComeToStop = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.drone.Command.oneofGroups_ = [[2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.drone.Command.CommandCase = {
  COMMAND_NOT_SET: 0,
  WAYPOINTCOMMAND: 2,
  BOMBDROPCOMMAND: 3,
  SURVEYCOMMAND: 4,
  OFFAXISCOMMAND: 5,
  NOTHINGCOMMAND: 6,
  SLEEPCOMMAND: 7,
  GOTOCOMMAND: 8,
  GOTORAWCOMMAND: 9
};

/**
 * @return {proto.drone.Command.CommandCase}
 */
proto.drone.Command.prototype.getCommandCase = function() {
  return /** @type {proto.drone.Command.CommandCase} */(jspb.Message.computeOneofCase(this, proto.drone.Command.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    subMission: (f = msg.getSubMission()) && proto.drone.Mission.toObject(includeInstance, f),
    waypointcommand: (f = msg.getWaypointcommand()) && proto.drone.WaypointCommand.toObject(includeInstance, f),
    bombdropcommand: (f = msg.getBombdropcommand()) && proto.drone.BombDropCommand.toObject(includeInstance, f),
    surveycommand: (f = msg.getSurveycommand()) && proto.drone.SurveyCommand.toObject(includeInstance, f),
    offaxiscommand: (f = msg.getOffaxiscommand()) && proto.drone.OffAxisCommand.toObject(includeInstance, f),
    nothingcommand: (f = msg.getNothingcommand()) && proto.drone.NothingCommand.toObject(includeInstance, f),
    sleepcommand: (f = msg.getSleepcommand()) && proto.drone.SleepCommand.toObject(includeInstance, f),
    gotocommand: (f = msg.getGotocommand()) && proto.drone.GotoCommand.toObject(includeInstance, f),
    gotorawcommand: (f = msg.getGotorawcommand()) && proto.drone.GotoRawCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.Command}
 */
proto.drone.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.Command;
  return proto.drone.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.Command}
 */
proto.drone.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Mission;
      reader.readMessage(value,proto.drone.Mission.deserializeBinaryFromReader);
      msg.setSubMission(value);
      break;
    case 2:
      var value = new proto.drone.WaypointCommand;
      reader.readMessage(value,proto.drone.WaypointCommand.deserializeBinaryFromReader);
      msg.setWaypointcommand(value);
      break;
    case 3:
      var value = new proto.drone.BombDropCommand;
      reader.readMessage(value,proto.drone.BombDropCommand.deserializeBinaryFromReader);
      msg.setBombdropcommand(value);
      break;
    case 4:
      var value = new proto.drone.SurveyCommand;
      reader.readMessage(value,proto.drone.SurveyCommand.deserializeBinaryFromReader);
      msg.setSurveycommand(value);
      break;
    case 5:
      var value = new proto.drone.OffAxisCommand;
      reader.readMessage(value,proto.drone.OffAxisCommand.deserializeBinaryFromReader);
      msg.setOffaxiscommand(value);
      break;
    case 6:
      var value = new proto.drone.NothingCommand;
      reader.readMessage(value,proto.drone.NothingCommand.deserializeBinaryFromReader);
      msg.setNothingcommand(value);
      break;
    case 7:
      var value = new proto.drone.SleepCommand;
      reader.readMessage(value,proto.drone.SleepCommand.deserializeBinaryFromReader);
      msg.setSleepcommand(value);
      break;
    case 8:
      var value = new proto.drone.GotoCommand;
      reader.readMessage(value,proto.drone.GotoCommand.deserializeBinaryFromReader);
      msg.setGotocommand(value);
      break;
    case 9:
      var value = new proto.drone.GotoRawCommand;
      reader.readMessage(value,proto.drone.GotoRawCommand.deserializeBinaryFromReader);
      msg.setGotorawcommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubMission();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Mission.serializeBinaryToWriter
    );
  }
  f = message.getWaypointcommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.drone.WaypointCommand.serializeBinaryToWriter
    );
  }
  f = message.getBombdropcommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.drone.BombDropCommand.serializeBinaryToWriter
    );
  }
  f = message.getSurveycommand();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.drone.SurveyCommand.serializeBinaryToWriter
    );
  }
  f = message.getOffaxiscommand();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.drone.OffAxisCommand.serializeBinaryToWriter
    );
  }
  f = message.getNothingcommand();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.drone.NothingCommand.serializeBinaryToWriter
    );
  }
  f = message.getSleepcommand();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.drone.SleepCommand.serializeBinaryToWriter
    );
  }
  f = message.getGotocommand();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.drone.GotoCommand.serializeBinaryToWriter
    );
  }
  f = message.getGotorawcommand();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.drone.GotoRawCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional Mission sub_mission = 1;
 * @return {?proto.drone.Mission}
 */
proto.drone.Command.prototype.getSubMission = function() {
  return /** @type{?proto.drone.Mission} */ (
    jspb.Message.getWrapperField(this, proto.drone.Mission, 1));
};


/**
 * @param {?proto.drone.Mission|undefined} value
 * @return {!proto.drone.Command} returns this
*/
proto.drone.Command.prototype.setSubMission = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.Command} returns this
 */
proto.drone.Command.prototype.clearSubMission = function() {
  return this.setSubMission(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Command.prototype.hasSubMission = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WaypointCommand WaypointCommand = 2;
 * @return {?proto.drone.WaypointCommand}
 */
proto.drone.Command.prototype.getWaypointcommand = function() {
  return /** @type{?proto.drone.WaypointCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.WaypointCommand, 2));
};


/**
 * @param {?proto.drone.WaypointCommand|undefined} value
 * @return {!proto.drone.Command} returns this
*/
proto.drone.Command.prototype.setWaypointcommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.drone.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.Command} returns this
 */
proto.drone.Command.prototype.clearWaypointcommand = function() {
  return this.setWaypointcommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Command.prototype.hasWaypointcommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BombDropCommand BombDropCommand = 3;
 * @return {?proto.drone.BombDropCommand}
 */
proto.drone.Command.prototype.getBombdropcommand = function() {
  return /** @type{?proto.drone.BombDropCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.BombDropCommand, 3));
};


/**
 * @param {?proto.drone.BombDropCommand|undefined} value
 * @return {!proto.drone.Command} returns this
*/
proto.drone.Command.prototype.setBombdropcommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.drone.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.Command} returns this
 */
proto.drone.Command.prototype.clearBombdropcommand = function() {
  return this.setBombdropcommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Command.prototype.hasBombdropcommand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SurveyCommand SurveyCommand = 4;
 * @return {?proto.drone.SurveyCommand}
 */
proto.drone.Command.prototype.getSurveycommand = function() {
  return /** @type{?proto.drone.SurveyCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.SurveyCommand, 4));
};


/**
 * @param {?proto.drone.SurveyCommand|undefined} value
 * @return {!proto.drone.Command} returns this
*/
proto.drone.Command.prototype.setSurveycommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.drone.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.Command} returns this
 */
proto.drone.Command.prototype.clearSurveycommand = function() {
  return this.setSurveycommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Command.prototype.hasSurveycommand = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OffAxisCommand OffAxisCommand = 5;
 * @return {?proto.drone.OffAxisCommand}
 */
proto.drone.Command.prototype.getOffaxiscommand = function() {
  return /** @type{?proto.drone.OffAxisCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.OffAxisCommand, 5));
};


/**
 * @param {?proto.drone.OffAxisCommand|undefined} value
 * @return {!proto.drone.Command} returns this
*/
proto.drone.Command.prototype.setOffaxiscommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.drone.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.Command} returns this
 */
proto.drone.Command.prototype.clearOffaxiscommand = function() {
  return this.setOffaxiscommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Command.prototype.hasOffaxiscommand = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional NothingCommand NothingCommand = 6;
 * @return {?proto.drone.NothingCommand}
 */
proto.drone.Command.prototype.getNothingcommand = function() {
  return /** @type{?proto.drone.NothingCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.NothingCommand, 6));
};


/**
 * @param {?proto.drone.NothingCommand|undefined} value
 * @return {!proto.drone.Command} returns this
*/
proto.drone.Command.prototype.setNothingcommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.drone.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.Command} returns this
 */
proto.drone.Command.prototype.clearNothingcommand = function() {
  return this.setNothingcommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Command.prototype.hasNothingcommand = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SleepCommand SleepCommand = 7;
 * @return {?proto.drone.SleepCommand}
 */
proto.drone.Command.prototype.getSleepcommand = function() {
  return /** @type{?proto.drone.SleepCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.SleepCommand, 7));
};


/**
 * @param {?proto.drone.SleepCommand|undefined} value
 * @return {!proto.drone.Command} returns this
*/
proto.drone.Command.prototype.setSleepcommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.drone.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.Command} returns this
 */
proto.drone.Command.prototype.clearSleepcommand = function() {
  return this.setSleepcommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Command.prototype.hasSleepcommand = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional GotoCommand GotoCommand = 8;
 * @return {?proto.drone.GotoCommand}
 */
proto.drone.Command.prototype.getGotocommand = function() {
  return /** @type{?proto.drone.GotoCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.GotoCommand, 8));
};


/**
 * @param {?proto.drone.GotoCommand|undefined} value
 * @return {!proto.drone.Command} returns this
*/
proto.drone.Command.prototype.setGotocommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.drone.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.Command} returns this
 */
proto.drone.Command.prototype.clearGotocommand = function() {
  return this.setGotocommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Command.prototype.hasGotocommand = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional GotoRawCommand GotoRawCommand = 9;
 * @return {?proto.drone.GotoRawCommand}
 */
proto.drone.Command.prototype.getGotorawcommand = function() {
  return /** @type{?proto.drone.GotoRawCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.GotoRawCommand, 9));
};


/**
 * @param {?proto.drone.GotoRawCommand|undefined} value
 * @return {!proto.drone.Command} returns this
*/
proto.drone.Command.prototype.setGotorawcommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.drone.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.Command} returns this
 */
proto.drone.Command.prototype.clearGotorawcommand = function() {
  return this.setGotorawcommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Command.prototype.hasGotorawcommand = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.drone.Mission.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.Mission.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.Mission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.Mission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Mission.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.drone.Command.toObject, includeInstance),
    currentCommand: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.Mission}
 */
proto.drone.Mission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.Mission;
  return proto.drone.Mission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.Mission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.Mission}
 */
proto.drone.Mission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Command;
      reader.readMessage(value,proto.drone.Command.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.Mission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.Mission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.Mission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Mission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.drone.Command.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Command commands = 1;
 * @return {!Array<!proto.drone.Command>}
 */
proto.drone.Mission.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.drone.Command>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.drone.Command, 1));
};


/**
 * @param {!Array<!proto.drone.Command>} value
 * @return {!proto.drone.Mission} returns this
*/
proto.drone.Mission.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.drone.Command=} opt_value
 * @param {number=} opt_index
 * @return {!proto.drone.Command}
 */
proto.drone.Mission.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.drone.Command, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.drone.Mission} returns this
 */
proto.drone.Mission.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};


/**
 * optional int32 current_command = 2;
 * @return {number}
 */
proto.drone.Mission.prototype.getCurrentCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Mission} returns this
 */
proto.drone.Mission.prototype.setCurrentCommand = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Mission} returns this
 */
proto.drone.Mission.prototype.clearCurrentCommand = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Mission.prototype.hasCurrentCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.StaticObstacle.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.StaticObstacle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.StaticObstacle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.StaticObstacle.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.drone.Position2D.toObject(includeInstance, f),
    cylinderRadius: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.StaticObstacle}
 */
proto.drone.StaticObstacle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.StaticObstacle;
  return proto.drone.StaticObstacle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.StaticObstacle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.StaticObstacle}
 */
proto.drone.StaticObstacle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Position2D;
      reader.readMessage(value,proto.drone.Position2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCylinderRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.StaticObstacle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.StaticObstacle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.StaticObstacle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.StaticObstacle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Position2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * required Position2D location = 1;
 * @return {!proto.drone.Position2D}
 */
proto.drone.StaticObstacle.prototype.getLocation = function() {
  return /** @type{!proto.drone.Position2D} */ (
    jspb.Message.getWrapperField(this, proto.drone.Position2D, 1, 1));
};


/**
 * @param {!proto.drone.Position2D} value
 * @return {!proto.drone.StaticObstacle} returns this
*/
proto.drone.StaticObstacle.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.StaticObstacle} returns this
 */
proto.drone.StaticObstacle.prototype.clearLocation = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.StaticObstacle.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double cylinder_radius = 2;
 * @return {number}
 */
proto.drone.StaticObstacle.prototype.getCylinderRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.StaticObstacle} returns this
 */
proto.drone.StaticObstacle.prototype.setCylinderRadius = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.StaticObstacle} returns this
 */
proto.drone.StaticObstacle.prototype.clearCylinderRadius = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.StaticObstacle.prototype.hasCylinderRadius = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.MovingObstacle.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.MovingObstacle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.MovingObstacle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.MovingObstacle.toObject = function(includeInstance, msg) {
  var f, obj = {
    point: (f = msg.getPoint()) && proto.drone.Position3D.toObject(includeInstance, f),
    sphereRadius: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.MovingObstacle}
 */
proto.drone.MovingObstacle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.MovingObstacle;
  return proto.drone.MovingObstacle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.MovingObstacle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.MovingObstacle}
 */
proto.drone.MovingObstacle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Position3D;
      reader.readMessage(value,proto.drone.Position3D.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSphereRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.MovingObstacle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.MovingObstacle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.MovingObstacle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.MovingObstacle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Position3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * required Position3D point = 1;
 * @return {!proto.drone.Position3D}
 */
proto.drone.MovingObstacle.prototype.getPoint = function() {
  return /** @type{!proto.drone.Position3D} */ (
    jspb.Message.getWrapperField(this, proto.drone.Position3D, 1, 1));
};


/**
 * @param {!proto.drone.Position3D} value
 * @return {!proto.drone.MovingObstacle} returns this
*/
proto.drone.MovingObstacle.prototype.setPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.MovingObstacle} returns this
 */
proto.drone.MovingObstacle.prototype.clearPoint = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.MovingObstacle.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double sphere_radius = 2;
 * @return {number}
 */
proto.drone.MovingObstacle.prototype.getSphereRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.MovingObstacle} returns this
 */
proto.drone.MovingObstacle.prototype.setSphereRadius = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.MovingObstacle} returns this
 */
proto.drone.MovingObstacle.prototype.clearSphereRadius = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.MovingObstacle.prototype.hasSphereRadius = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.drone.Obstacles.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.Obstacles.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.Obstacles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.Obstacles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Obstacles.toObject = function(includeInstance, msg) {
  var f, obj = {
    staticObstaclesList: jspb.Message.toObjectList(msg.getStaticObstaclesList(),
    proto.drone.StaticObstacle.toObject, includeInstance),
    movingObstaclesList: jspb.Message.toObjectList(msg.getMovingObstaclesList(),
    proto.drone.MovingObstacle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.Obstacles}
 */
proto.drone.Obstacles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.Obstacles;
  return proto.drone.Obstacles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.Obstacles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.Obstacles}
 */
proto.drone.Obstacles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.StaticObstacle;
      reader.readMessage(value,proto.drone.StaticObstacle.deserializeBinaryFromReader);
      msg.addStaticObstacles(value);
      break;
    case 2:
      var value = new proto.drone.MovingObstacle;
      reader.readMessage(value,proto.drone.MovingObstacle.deserializeBinaryFromReader);
      msg.addMovingObstacles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.Obstacles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.Obstacles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.Obstacles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Obstacles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStaticObstaclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.drone.StaticObstacle.serializeBinaryToWriter
    );
  }
  f = message.getMovingObstaclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.drone.MovingObstacle.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StaticObstacle static_obstacles = 1;
 * @return {!Array<!proto.drone.StaticObstacle>}
 */
proto.drone.Obstacles.prototype.getStaticObstaclesList = function() {
  return /** @type{!Array<!proto.drone.StaticObstacle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.drone.StaticObstacle, 1));
};


/**
 * @param {!Array<!proto.drone.StaticObstacle>} value
 * @return {!proto.drone.Obstacles} returns this
*/
proto.drone.Obstacles.prototype.setStaticObstaclesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.drone.StaticObstacle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.drone.StaticObstacle}
 */
proto.drone.Obstacles.prototype.addStaticObstacles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.drone.StaticObstacle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.drone.Obstacles} returns this
 */
proto.drone.Obstacles.prototype.clearStaticObstaclesList = function() {
  return this.setStaticObstaclesList([]);
};


/**
 * repeated MovingObstacle moving_obstacles = 2;
 * @return {!Array<!proto.drone.MovingObstacle>}
 */
proto.drone.Obstacles.prototype.getMovingObstaclesList = function() {
  return /** @type{!Array<!proto.drone.MovingObstacle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.drone.MovingObstacle, 2));
};


/**
 * @param {!Array<!proto.drone.MovingObstacle>} value
 * @return {!proto.drone.Obstacles} returns this
*/
proto.drone.Obstacles.prototype.setMovingObstaclesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.drone.MovingObstacle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.drone.MovingObstacle}
 */
proto.drone.Obstacles.prototype.addMovingObstacles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.drone.MovingObstacle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.drone.Obstacles} returns this
 */
proto.drone.Obstacles.prototype.clearMovingObstaclesList = function() {
  return this.setMovingObstaclesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.drone.GroundData.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.drone.GroundData.DataCase = {
  DATA_NOT_SET: 0,
  MISSION: 1,
  OBSTACLES: 2
};

/**
 * @return {proto.drone.GroundData.DataCase}
 */
proto.drone.GroundData.prototype.getDataCase = function() {
  return /** @type {proto.drone.GroundData.DataCase} */(jspb.Message.computeOneofCase(this, proto.drone.GroundData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.GroundData.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.GroundData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.GroundData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GroundData.toObject = function(includeInstance, msg) {
  var f, obj = {
    mission: (f = msg.getMission()) && proto.drone.Mission.toObject(includeInstance, f),
    obstacles: (f = msg.getObstacles()) && proto.drone.Obstacles.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.GroundData}
 */
proto.drone.GroundData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.GroundData;
  return proto.drone.GroundData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.GroundData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.GroundData}
 */
proto.drone.GroundData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.Mission;
      reader.readMessage(value,proto.drone.Mission.deserializeBinaryFromReader);
      msg.setMission(value);
      break;
    case 2:
      var value = new proto.drone.Obstacles;
      reader.readMessage(value,proto.drone.Obstacles.deserializeBinaryFromReader);
      msg.setObstacles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.GroundData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.GroundData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.GroundData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GroundData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMission();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.drone.Mission.serializeBinaryToWriter
    );
  }
  f = message.getObstacles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.drone.Obstacles.serializeBinaryToWriter
    );
  }
};


/**
 * optional Mission mission = 1;
 * @return {?proto.drone.Mission}
 */
proto.drone.GroundData.prototype.getMission = function() {
  return /** @type{?proto.drone.Mission} */ (
    jspb.Message.getWrapperField(this, proto.drone.Mission, 1));
};


/**
 * @param {?proto.drone.Mission|undefined} value
 * @return {!proto.drone.GroundData} returns this
*/
proto.drone.GroundData.prototype.setMission = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.drone.GroundData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.GroundData} returns this
 */
proto.drone.GroundData.prototype.clearMission = function() {
  return this.setMission(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GroundData.prototype.hasMission = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Obstacles obstacles = 2;
 * @return {?proto.drone.Obstacles}
 */
proto.drone.GroundData.prototype.getObstacles = function() {
  return /** @type{?proto.drone.Obstacles} */ (
    jspb.Message.getWrapperField(this, proto.drone.Obstacles, 2));
};


/**
 * @param {?proto.drone.Obstacles|undefined} value
 * @return {!proto.drone.GroundData} returns this
*/
proto.drone.GroundData.prototype.setObstacles = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.drone.GroundData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.GroundData} returns this
 */
proto.drone.GroundData.prototype.clearObstacles = function() {
  return this.setObstacles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GroundData.prototype.hasObstacles = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.drone);
