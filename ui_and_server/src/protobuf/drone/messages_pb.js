// source: drone/messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.drone.AlarmSequence', null, global);
goog.exportSymbol('proto.drone.Goal', null, global);
goog.exportSymbol('proto.drone.Output', null, global);
goog.exportSymbol('proto.drone.Sensors', null, global);
goog.exportSymbol('proto.drone.UasMessage', null, global);
goog.exportSymbol('proto.drone.UasMessage.PayloadCase', null, global);
goog.exportSymbol('proto.drone.UgvSensors', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.Sensors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.Sensors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.Sensors.displayName = 'proto.drone.Sensors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.Goal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.Goal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.Goal.displayName = 'proto.drone.Goal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.Output.displayName = 'proto.drone.Output';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.UgvSensors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.UgvSensors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.UgvSensors.displayName = 'proto.drone.UgvSensors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.UasMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.drone.UasMessage.oneofGroups_);
};
goog.inherits(proto.drone.UasMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.UasMessage.displayName = 'proto.drone.UasMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.AlarmSequence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.drone.AlarmSequence.repeatedFields_, null);
};
goog.inherits(proto.drone.AlarmSequence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.AlarmSequence.displayName = 'proto.drone.AlarmSequence';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.Sensors.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.Sensors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.Sensors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Sensors.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    gpsFix: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    altitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    relativeAltitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    velocityX: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    velocityY: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    velocityZ: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    gpsGroundSpeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    gpsSatelliteCount: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    gpsEph: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    gpsEpv: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    accelerometerX: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    accelerometerY: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    accelerometerZ: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    gyroX: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    gyroY: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f,
    gyroZ: (f = jspb.Message.getOptionalFloatingPointField(msg, 20)) == null ? undefined : f,
    roll: (f = jspb.Message.getOptionalFloatingPointField(msg, 21)) == null ? undefined : f,
    pitch: (f = jspb.Message.getOptionalFloatingPointField(msg, 22)) == null ? undefined : f,
    yaw: (f = jspb.Message.getOptionalFloatingPointField(msg, 23)) == null ? undefined : f,
    batteryVoltage: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f,
    batteryCurrent: (f = jspb.Message.getOptionalFloatingPointField(msg, 25)) == null ? undefined : f,
    armed: (f = jspb.Message.getBooleanField(msg, 26)) == null ? undefined : f,
    autopilotState: (f = jspb.Message.getField(msg, 27)) == null ? undefined : f,
    homeAltitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 28)) == null ? undefined : f,
    runUasMission: (f = jspb.Message.getBooleanField(msg, 29)) == null ? undefined : f,
    doneDropping: (f = jspb.Message.getBooleanField(msg, 30)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.Sensors}
 */
proto.drone.Sensors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.Sensors;
  return proto.drone.Sensors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.Sensors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.Sensors}
 */
proto.drone.Sensors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGpsFix(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltitude(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRelativeAltitude(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeading(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocityX(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocityY(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocityZ(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGpsGroundSpeed(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGpsSatelliteCount(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGpsEph(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGpsEpv(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAccelerometerX(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAccelerometerY(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAccelerometerZ(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGyroX(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGyroY(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGyroZ(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRoll(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitch(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYaw(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBatteryVoltage(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBatteryCurrent(value);
      break;
    case 26:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setArmed(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setAutopilotState(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHomeAltitude(value);
      break;
    case 29:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunUasMission(value);
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoneDropping(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.Sensors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.Sensors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.Sensors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Sensors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeFloat(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeFloat(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeFloat(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeFloat(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeFloat(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeFloat(
      25,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeBool(
      26,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeString(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeFloat(
      28,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeBool(
      29,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeBool(
      30,
      f
    );
  }
};


/**
 * required double time = 1;
 * @return {number}
 */
proto.drone.Sensors.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool gps_fix = 2;
 * @return {boolean}
 */
proto.drone.Sensors.prototype.getGpsFix = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setGpsFix = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearGpsFix = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasGpsFix = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double latitude = 3;
 * @return {number}
 */
proto.drone.Sensors.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required double longitude = 4;
 * @return {number}
 */
proto.drone.Sensors.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float altitude = 5;
 * @return {number}
 */
proto.drone.Sensors.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setAltitude = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearAltitude = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasAltitude = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float relative_altitude = 6;
 * @return {number}
 */
proto.drone.Sensors.prototype.getRelativeAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setRelativeAltitude = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearRelativeAltitude = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasRelativeAltitude = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float heading = 7;
 * @return {number}
 */
proto.drone.Sensors.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required float velocity_x = 8;
 * @return {number}
 */
proto.drone.Sensors.prototype.getVelocityX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setVelocityX = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearVelocityX = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasVelocityX = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required float velocity_y = 9;
 * @return {number}
 */
proto.drone.Sensors.prototype.getVelocityY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setVelocityY = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearVelocityY = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasVelocityY = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required float velocity_z = 10;
 * @return {number}
 */
proto.drone.Sensors.prototype.getVelocityZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setVelocityZ = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearVelocityZ = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasVelocityZ = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required float gps_ground_speed = 11;
 * @return {number}
 */
proto.drone.Sensors.prototype.getGpsGroundSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setGpsGroundSpeed = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearGpsGroundSpeed = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasGpsGroundSpeed = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required int32 gps_satellite_count = 12;
 * @return {number}
 */
proto.drone.Sensors.prototype.getGpsSatelliteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setGpsSatelliteCount = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearGpsSatelliteCount = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasGpsSatelliteCount = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required float gps_eph = 13;
 * @return {number}
 */
proto.drone.Sensors.prototype.getGpsEph = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setGpsEph = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearGpsEph = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasGpsEph = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required float gps_epv = 14;
 * @return {number}
 */
proto.drone.Sensors.prototype.getGpsEpv = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setGpsEpv = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearGpsEpv = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasGpsEpv = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required float accelerometer_x = 15;
 * @return {number}
 */
proto.drone.Sensors.prototype.getAccelerometerX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setAccelerometerX = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearAccelerometerX = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasAccelerometerX = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required float accelerometer_y = 16;
 * @return {number}
 */
proto.drone.Sensors.prototype.getAccelerometerY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setAccelerometerY = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearAccelerometerY = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasAccelerometerY = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * required float accelerometer_z = 17;
 * @return {number}
 */
proto.drone.Sensors.prototype.getAccelerometerZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setAccelerometerZ = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearAccelerometerZ = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasAccelerometerZ = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * required float gyro_x = 18;
 * @return {number}
 */
proto.drone.Sensors.prototype.getGyroX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setGyroX = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearGyroX = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasGyroX = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * required float gyro_y = 19;
 * @return {number}
 */
proto.drone.Sensors.prototype.getGyroY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setGyroY = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearGyroY = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasGyroY = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * required float gyro_z = 20;
 * @return {number}
 */
proto.drone.Sensors.prototype.getGyroZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setGyroZ = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearGyroZ = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasGyroZ = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * required float roll = 21;
 * @return {number}
 */
proto.drone.Sensors.prototype.getRoll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setRoll = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearRoll = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasRoll = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * required float pitch = 22;
 * @return {number}
 */
proto.drone.Sensors.prototype.getPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setPitch = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearPitch = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasPitch = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * required float yaw = 23;
 * @return {number}
 */
proto.drone.Sensors.prototype.getYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setYaw = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearYaw = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasYaw = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * required float battery_voltage = 24;
 * @return {number}
 */
proto.drone.Sensors.prototype.getBatteryVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setBatteryVoltage = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearBatteryVoltage = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasBatteryVoltage = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * required float battery_current = 25;
 * @return {number}
 */
proto.drone.Sensors.prototype.getBatteryCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setBatteryCurrent = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearBatteryCurrent = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasBatteryCurrent = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * required bool armed = 26;
 * @return {boolean}
 */
proto.drone.Sensors.prototype.getArmed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 26, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setArmed = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearArmed = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasArmed = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * required string autopilot_state = 27;
 * @return {string}
 */
proto.drone.Sensors.prototype.getAutopilotState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * @param {string} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setAutopilotState = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearAutopilotState = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasAutopilotState = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * required float home_altitude = 28;
 * @return {number}
 */
proto.drone.Sensors.prototype.getHomeAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setHomeAltitude = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearHomeAltitude = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasHomeAltitude = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * required bool run_uas_mission = 29;
 * @return {boolean}
 */
proto.drone.Sensors.prototype.getRunUasMission = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 29, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setRunUasMission = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearRunUasMission = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasRunUasMission = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * required bool done_dropping = 30;
 * @return {boolean}
 */
proto.drone.Sensors.prototype.getDoneDropping = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 30, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.setDoneDropping = function(value) {
  return jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Sensors} returns this
 */
proto.drone.Sensors.prototype.clearDoneDropping = function() {
  return jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Sensors.prototype.hasDoneDropping = function() {
  return jspb.Message.getField(this, 30) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.Goal.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.Goal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.Goal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Goal.toObject = function(includeInstance, msg) {
  var f, obj = {
    runMission: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.Goal}
 */
proto.drone.Goal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.Goal;
  return proto.drone.Goal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.Goal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.Goal}
 */
proto.drone.Goal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunMission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.Goal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.Goal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.Goal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Goal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * required bool run_mission = 1;
 * @return {boolean}
 */
proto.drone.Goal.prototype.getRunMission = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Goal} returns this
 */
proto.drone.Goal.prototype.setRunMission = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Goal} returns this
 */
proto.drone.Goal.prototype.clearRunMission = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Goal.prototype.hasRunMission = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    missionState: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    flightTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    currentCommandIndex: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    sendSetpoint: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    setpointLatitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    setpointLongitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    setpointAltitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    setpointYaw: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    gimbalAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    bombDrop: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    alarm: (f = jspb.Message.getBooleanField(msg, 12)) == null ? undefined : f,
    dslr: (f = jspb.Message.getBooleanField(msg, 13)) == null ? undefined : f,
    triggerTakeoff: (f = jspb.Message.getBooleanField(msg, 14)) == null ? undefined : f,
    triggerHold: (f = jspb.Message.getBooleanField(msg, 15)) == null ? undefined : f,
    triggerOffboard: (f = jspb.Message.getBooleanField(msg, 16)) == null ? undefined : f,
    triggerRtl: (f = jspb.Message.getBooleanField(msg, 17)) == null ? undefined : f,
    triggerLand: (f = jspb.Message.getBooleanField(msg, 18)) == null ? undefined : f,
    triggerArm: (f = jspb.Message.getBooleanField(msg, 19)) == null ? undefined : f,
    triggerDisarm: (f = jspb.Message.getBooleanField(msg, 20)) == null ? undefined : f,
    deploy: (f = jspb.Message.getBooleanField(msg, 21)) == null ? undefined : f,
    missionCommandedLand: (f = jspb.Message.getBooleanField(msg, 22)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.Output}
 */
proto.drone.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.Output;
  return proto.drone.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.Output}
 */
proto.drone.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMissionState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFlightTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentCommandIndex(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendSetpoint(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSetpointLatitude(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSetpointLongitude(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSetpointAltitude(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSetpointYaw(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGimbalAngle(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBombDrop(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlarm(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDslr(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTriggerTakeoff(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTriggerHold(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTriggerOffboard(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTriggerRtl(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTriggerLand(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTriggerArm(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTriggerDisarm(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeploy(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMissionCommandedLand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeBool(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBool(
      22,
      f
    );
  }
};


/**
 * required int32 state = 1;
 * @return {number}
 */
proto.drone.Output.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setState = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearState = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 mission_state = 2;
 * @return {number}
 */
proto.drone.Output.prototype.getMissionState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setMissionState = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearMissionState = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasMissionState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double flight_time = 3;
 * @return {number}
 */
proto.drone.Output.prototype.getFlightTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setFlightTime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearFlightTime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasFlightTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 current_command_index = 4;
 * @return {number}
 */
proto.drone.Output.prototype.getCurrentCommandIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setCurrentCommandIndex = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearCurrentCommandIndex = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasCurrentCommandIndex = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bool send_setpoint = 5;
 * @return {boolean}
 */
proto.drone.Output.prototype.getSendSetpoint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setSendSetpoint = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearSendSetpoint = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasSendSetpoint = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float setpoint_latitude = 6;
 * @return {number}
 */
proto.drone.Output.prototype.getSetpointLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setSetpointLatitude = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearSetpointLatitude = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasSetpointLatitude = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float setpoint_longitude = 7;
 * @return {number}
 */
proto.drone.Output.prototype.getSetpointLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setSetpointLongitude = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearSetpointLongitude = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasSetpointLongitude = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required float setpoint_altitude = 8;
 * @return {number}
 */
proto.drone.Output.prototype.getSetpointAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setSetpointAltitude = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearSetpointAltitude = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasSetpointAltitude = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required float setpoint_yaw = 9;
 * @return {number}
 */
proto.drone.Output.prototype.getSetpointYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setSetpointYaw = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearSetpointYaw = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasSetpointYaw = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required float gimbal_angle = 10;
 * @return {number}
 */
proto.drone.Output.prototype.getGimbalAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setGimbalAngle = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearGimbalAngle = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasGimbalAngle = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required bool bomb_drop = 11;
 * @return {boolean}
 */
proto.drone.Output.prototype.getBombDrop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setBombDrop = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearBombDrop = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasBombDrop = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required bool alarm = 12;
 * @return {boolean}
 */
proto.drone.Output.prototype.getAlarm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setAlarm = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearAlarm = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasAlarm = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required bool dslr = 13;
 * @return {boolean}
 */
proto.drone.Output.prototype.getDslr = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setDslr = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearDslr = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasDslr = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required bool trigger_takeoff = 14;
 * @return {boolean}
 */
proto.drone.Output.prototype.getTriggerTakeoff = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setTriggerTakeoff = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearTriggerTakeoff = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasTriggerTakeoff = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required bool trigger_hold = 15;
 * @return {boolean}
 */
proto.drone.Output.prototype.getTriggerHold = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setTriggerHold = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearTriggerHold = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasTriggerHold = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required bool trigger_offboard = 16;
 * @return {boolean}
 */
proto.drone.Output.prototype.getTriggerOffboard = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setTriggerOffboard = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearTriggerOffboard = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasTriggerOffboard = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * required bool trigger_rtl = 17;
 * @return {boolean}
 */
proto.drone.Output.prototype.getTriggerRtl = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setTriggerRtl = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearTriggerRtl = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasTriggerRtl = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * required bool trigger_land = 18;
 * @return {boolean}
 */
proto.drone.Output.prototype.getTriggerLand = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setTriggerLand = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearTriggerLand = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasTriggerLand = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * required bool trigger_arm = 19;
 * @return {boolean}
 */
proto.drone.Output.prototype.getTriggerArm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setTriggerArm = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearTriggerArm = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasTriggerArm = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * required bool trigger_disarm = 20;
 * @return {boolean}
 */
proto.drone.Output.prototype.getTriggerDisarm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setTriggerDisarm = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearTriggerDisarm = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasTriggerDisarm = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * required bool deploy = 21;
 * @return {boolean}
 */
proto.drone.Output.prototype.getDeploy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setDeploy = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearDeploy = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasDeploy = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * required bool mission_commanded_land = 22;
 * @return {boolean}
 */
proto.drone.Output.prototype.getMissionCommandedLand = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.setMissionCommandedLand = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.Output} returns this
 */
proto.drone.Output.prototype.clearMissionCommandedLand = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.Output.prototype.hasMissionCommandedLand = function() {
  return jspb.Message.getField(this, 22) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.UgvSensors.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.UgvSensors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.UgvSensors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.UgvSensors.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    altitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.UgvSensors}
 */
proto.drone.UgvSensors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.UgvSensors;
  return proto.drone.UgvSensors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.UgvSensors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.UgvSensors}
 */
proto.drone.UgvSensors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.UgvSensors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.UgvSensors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.UgvSensors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.UgvSensors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * required double time = 1;
 * @return {number}
 */
proto.drone.UgvSensors.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.UgvSensors} returns this
 */
proto.drone.UgvSensors.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.UgvSensors} returns this
 */
proto.drone.UgvSensors.prototype.clearTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.UgvSensors.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double latitude = 2;
 * @return {number}
 */
proto.drone.UgvSensors.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.UgvSensors} returns this
 */
proto.drone.UgvSensors.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.UgvSensors} returns this
 */
proto.drone.UgvSensors.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.UgvSensors.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double longitude = 3;
 * @return {number}
 */
proto.drone.UgvSensors.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.UgvSensors} returns this
 */
proto.drone.UgvSensors.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.UgvSensors} returns this
 */
proto.drone.UgvSensors.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.UgvSensors.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required double altitude = 4;
 * @return {number}
 */
proto.drone.UgvSensors.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.UgvSensors} returns this
 */
proto.drone.UgvSensors.prototype.setAltitude = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.UgvSensors} returns this
 */
proto.drone.UgvSensors.prototype.clearAltitude = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.UgvSensors.prototype.hasAltitude = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.drone.UasMessage.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.drone.UasMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  SENSORS: 2,
  GOAL: 3,
  OUTPUT: 4
};

/**
 * @return {proto.drone.UasMessage.PayloadCase}
 */
proto.drone.UasMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.drone.UasMessage.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.drone.UasMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.UasMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.UasMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.UasMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.UasMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    sensors: (f = msg.getSensors()) && proto.drone.Sensors.toObject(includeInstance, f),
    goal: (f = msg.getGoal()) && proto.drone.Goal.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && proto.drone.Output.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.UasMessage}
 */
proto.drone.UasMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.UasMessage;
  return proto.drone.UasMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.UasMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.UasMessage}
 */
proto.drone.UasMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.drone.Sensors;
      reader.readMessage(value,proto.drone.Sensors.deserializeBinaryFromReader);
      msg.setSensors(value);
      break;
    case 3:
      var value = new proto.drone.Goal;
      reader.readMessage(value,proto.drone.Goal.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    case 4:
      var value = new proto.drone.Output;
      reader.readMessage(value,proto.drone.Output.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.UasMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.UasMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.UasMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.UasMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getSensors();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.drone.Sensors.serializeBinaryToWriter
    );
  }
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.drone.Goal.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.drone.Output.serializeBinaryToWriter
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.drone.UasMessage.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.UasMessage} returns this
 */
proto.drone.UasMessage.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.UasMessage} returns this
 */
proto.drone.UasMessage.prototype.clearTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.UasMessage.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Sensors sensors = 2;
 * @return {?proto.drone.Sensors}
 */
proto.drone.UasMessage.prototype.getSensors = function() {
  return /** @type{?proto.drone.Sensors} */ (
    jspb.Message.getWrapperField(this, proto.drone.Sensors, 2));
};


/**
 * @param {?proto.drone.Sensors|undefined} value
 * @return {!proto.drone.UasMessage} returns this
*/
proto.drone.UasMessage.prototype.setSensors = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.drone.UasMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.UasMessage} returns this
 */
proto.drone.UasMessage.prototype.clearSensors = function() {
  return this.setSensors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.UasMessage.prototype.hasSensors = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Goal goal = 3;
 * @return {?proto.drone.Goal}
 */
proto.drone.UasMessage.prototype.getGoal = function() {
  return /** @type{?proto.drone.Goal} */ (
    jspb.Message.getWrapperField(this, proto.drone.Goal, 3));
};


/**
 * @param {?proto.drone.Goal|undefined} value
 * @return {!proto.drone.UasMessage} returns this
*/
proto.drone.UasMessage.prototype.setGoal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.drone.UasMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.UasMessage} returns this
 */
proto.drone.UasMessage.prototype.clearGoal = function() {
  return this.setGoal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.UasMessage.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Output output = 4;
 * @return {?proto.drone.Output}
 */
proto.drone.UasMessage.prototype.getOutput = function() {
  return /** @type{?proto.drone.Output} */ (
    jspb.Message.getWrapperField(this, proto.drone.Output, 4));
};


/**
 * @param {?proto.drone.Output|undefined} value
 * @return {!proto.drone.UasMessage} returns this
*/
proto.drone.UasMessage.prototype.setOutput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.drone.UasMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.UasMessage} returns this
 */
proto.drone.UasMessage.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.UasMessage.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.drone.AlarmSequence.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.AlarmSequence.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.AlarmSequence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.AlarmSequence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.AlarmSequence.toObject = function(includeInstance, msg) {
  var f, obj = {
    onOffCyclesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.AlarmSequence}
 */
proto.drone.AlarmSequence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.AlarmSequence;
  return proto.drone.AlarmSequence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.AlarmSequence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.AlarmSequence}
 */
proto.drone.AlarmSequence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addOnOffCycles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.AlarmSequence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.AlarmSequence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.AlarmSequence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.AlarmSequence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnOffCyclesList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float on_off_cycles = 1;
 * @return {!Array<number>}
 */
proto.drone.AlarmSequence.prototype.getOnOffCyclesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.drone.AlarmSequence} returns this
 */
proto.drone.AlarmSequence.prototype.setOnOffCyclesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.drone.AlarmSequence} returns this
 */
proto.drone.AlarmSequence.prototype.addOnOffCycles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.drone.AlarmSequence} returns this
 */
proto.drone.AlarmSequence.prototype.clearOnOffCyclesList = function() {
  return this.setOnOffCyclesList([]);
};


goog.object.extend(exports, proto.drone);
