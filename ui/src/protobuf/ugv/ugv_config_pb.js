// source: ugv/ugv_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ugv.Config', null, global);
goog.exportSymbol('proto.ugv.PidParams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ugv.PidParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ugv.PidParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ugv.PidParams.displayName = 'proto.ugv.PidParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ugv.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ugv.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ugv.Config.displayName = 'proto.ugv.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ugv.PidParams.prototype.toObject = function(opt_includeInstance) {
  return proto.ugv.PidParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ugv.PidParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.PidParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    kp: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    ki: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    kd: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    maxOutput: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    maxIError: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ugv.PidParams}
 */
proto.ugv.PidParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ugv.PidParams;
  return proto.ugv.PidParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ugv.PidParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ugv.PidParams}
 */
proto.ugv.PidParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKi(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxOutput(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxIError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ugv.PidParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ugv.PidParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ugv.PidParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.PidParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKp();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getKi();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getKd();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMaxOutput();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMaxIError();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float kp = 1;
 * @return {number}
 */
proto.ugv.PidParams.prototype.getKp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.PidParams} returns this
 */
proto.ugv.PidParams.prototype.setKp = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float ki = 2;
 * @return {number}
 */
proto.ugv.PidParams.prototype.getKi = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.PidParams} returns this
 */
proto.ugv.PidParams.prototype.setKi = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float kd = 3;
 * @return {number}
 */
proto.ugv.PidParams.prototype.getKd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.PidParams} returns this
 */
proto.ugv.PidParams.prototype.setKd = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float max_output = 4;
 * @return {number}
 */
proto.ugv.PidParams.prototype.getMaxOutput = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.PidParams} returns this
 */
proto.ugv.PidParams.prototype.setMaxOutput = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float max_i_error = 5;
 * @return {number}
 */
proto.ugv.PidParams.prototype.getMaxIError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.PidParams} returns this
 */
proto.ugv.PidParams.prototype.setMaxIError = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ugv.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.ugv.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ugv.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    minTargetDist: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    drivePower: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    anglePid: (f = msg.getAnglePid()) && proto.ugv.PidParams.toObject(includeInstance, f),
    minFlipPitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    magDeclination: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ugv.Config}
 */
proto.ugv.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ugv.Config;
  return proto.ugv.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ugv.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ugv.Config}
 */
proto.ugv.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinTargetDist(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDrivePower(value);
      break;
    case 3:
      var value = new proto.ugv.PidParams;
      reader.readMessage(value,proto.ugv.PidParams.deserializeBinaryFromReader);
      msg.setAnglePid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinFlipPitch(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMagDeclination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ugv.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ugv.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ugv.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ugv.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinTargetDist();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getDrivePower();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getAnglePid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ugv.PidParams.serializeBinaryToWriter
    );
  }
  f = message.getMinFlipPitch();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMagDeclination();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float min_target_dist = 1;
 * @return {number}
 */
proto.ugv.Config.prototype.getMinTargetDist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.Config} returns this
 */
proto.ugv.Config.prototype.setMinTargetDist = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float drive_power = 2;
 * @return {number}
 */
proto.ugv.Config.prototype.getDrivePower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.Config} returns this
 */
proto.ugv.Config.prototype.setDrivePower = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional PidParams angle_pid = 3;
 * @return {?proto.ugv.PidParams}
 */
proto.ugv.Config.prototype.getAnglePid = function() {
  return /** @type{?proto.ugv.PidParams} */ (
    jspb.Message.getWrapperField(this, proto.ugv.PidParams, 3));
};


/**
 * @param {?proto.ugv.PidParams|undefined} value
 * @return {!proto.ugv.Config} returns this
*/
proto.ugv.Config.prototype.setAnglePid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ugv.Config} returns this
 */
proto.ugv.Config.prototype.clearAnglePid = function() {
  return this.setAnglePid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ugv.Config.prototype.hasAnglePid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float min_flip_pitch = 4;
 * @return {number}
 */
proto.ugv.Config.prototype.getMinFlipPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.Config} returns this
 */
proto.ugv.Config.prototype.setMinFlipPitch = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float mag_declination = 5;
 * @return {number}
 */
proto.ugv.Config.prototype.getMagDeclination = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ugv.Config} returns this
 */
proto.ugv.Config.prototype.setMagDeclination = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


goog.object.extend(exports, proto.ugv);
