// source: drone/timeline_grammar.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var drone_mission_commands_pb = require('../drone/mission_commands_pb.js');
goog.object.extend(proto, drone_mission_commands_pb);
goog.exportSymbol('proto.drone.DroneCommand', null, global);
goog.exportSymbol('proto.drone.DroneCommand.CommandCase', null, global);
goog.exportSymbol('proto.drone.DroneProgram', null, global);
goog.exportSymbol('proto.drone.GroundCommand', null, global);
goog.exportSymbol('proto.drone.GroundCommand.CommandCase', null, global);
goog.exportSymbol('proto.drone.GroundProgram', null, global);
goog.exportSymbol('proto.drone.LandAtLocationCommand', null, global);
goog.exportSymbol('proto.drone.LandCommand', null, global);
goog.exportSymbol('proto.drone.TranslateCommand', null, global);
goog.exportSymbol('proto.drone.TriggerAlarmCommand', null, global);
goog.exportSymbol('proto.drone.TriggerBombDropCommand', null, global);
goog.exportSymbol('proto.drone.UgvDropCommand', null, global);
goog.exportSymbol('proto.drone.WaitCommand', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.GroundProgram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.drone.GroundProgram.repeatedFields_, null);
};
goog.inherits(proto.drone.GroundProgram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.GroundProgram.displayName = 'proto.drone.GroundProgram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.GroundCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.drone.GroundCommand.oneofGroups_);
};
goog.inherits(proto.drone.GroundCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.GroundCommand.displayName = 'proto.drone.GroundCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.UgvDropCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.UgvDropCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.UgvDropCommand.displayName = 'proto.drone.UgvDropCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.WaitCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.WaitCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.WaitCommand.displayName = 'proto.drone.WaitCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.LandAtLocationCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.LandAtLocationCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.LandAtLocationCommand.displayName = 'proto.drone.LandAtLocationCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.DroneProgram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.drone.DroneProgram.repeatedFields_, null);
};
goog.inherits(proto.drone.DroneProgram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.DroneProgram.displayName = 'proto.drone.DroneProgram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.DroneCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.drone.DroneCommand.oneofGroups_);
};
goog.inherits(proto.drone.DroneCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.DroneCommand.displayName = 'proto.drone.DroneCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.TranslateCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.TranslateCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.TranslateCommand.displayName = 'proto.drone.TranslateCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.TriggerBombDropCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.TriggerBombDropCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.TriggerBombDropCommand.displayName = 'proto.drone.TriggerBombDropCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.TriggerAlarmCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.TriggerAlarmCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.TriggerAlarmCommand.displayName = 'proto.drone.TriggerAlarmCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drone.LandCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drone.LandCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drone.LandCommand.displayName = 'proto.drone.LandCommand';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.drone.GroundProgram.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.GroundProgram.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.GroundProgram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.GroundProgram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GroundProgram.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.drone.GroundCommand.toObject, includeInstance),
    staticObstaclesList: jspb.Message.toObjectList(msg.getStaticObstaclesList(),
    drone_mission_commands_pb.StaticObstacle.toObject, includeInstance),
    fieldBoundaryList: jspb.Message.toObjectList(msg.getFieldBoundaryList(),
    drone_mission_commands_pb.Position2D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.GroundProgram}
 */
proto.drone.GroundProgram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.GroundProgram;
  return proto.drone.GroundProgram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.GroundProgram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.GroundProgram}
 */
proto.drone.GroundProgram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.GroundCommand;
      reader.readMessage(value,proto.drone.GroundCommand.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    case 2:
      var value = new drone_mission_commands_pb.StaticObstacle;
      reader.readMessage(value,drone_mission_commands_pb.StaticObstacle.deserializeBinaryFromReader);
      msg.addStaticObstacles(value);
      break;
    case 3:
      var value = new drone_mission_commands_pb.Position2D;
      reader.readMessage(value,drone_mission_commands_pb.Position2D.deserializeBinaryFromReader);
      msg.addFieldBoundary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.GroundProgram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.GroundProgram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.GroundProgram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GroundProgram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.drone.GroundCommand.serializeBinaryToWriter
    );
  }
  f = message.getStaticObstaclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      drone_mission_commands_pb.StaticObstacle.serializeBinaryToWriter
    );
  }
  f = message.getFieldBoundaryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      drone_mission_commands_pb.Position2D.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroundCommand commands = 1;
 * @return {!Array<!proto.drone.GroundCommand>}
 */
proto.drone.GroundProgram.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.drone.GroundCommand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.drone.GroundCommand, 1));
};


/**
 * @param {!Array<!proto.drone.GroundCommand>} value
 * @return {!proto.drone.GroundProgram} returns this
*/
proto.drone.GroundProgram.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.drone.GroundCommand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.drone.GroundCommand}
 */
proto.drone.GroundProgram.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.drone.GroundCommand, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.drone.GroundProgram} returns this
 */
proto.drone.GroundProgram.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};


/**
 * repeated StaticObstacle static_obstacles = 2;
 * @return {!Array<!proto.drone.StaticObstacle>}
 */
proto.drone.GroundProgram.prototype.getStaticObstaclesList = function() {
  return /** @type{!Array<!proto.drone.StaticObstacle>} */ (
    jspb.Message.getRepeatedWrapperField(this, drone_mission_commands_pb.StaticObstacle, 2));
};


/**
 * @param {!Array<!proto.drone.StaticObstacle>} value
 * @return {!proto.drone.GroundProgram} returns this
*/
proto.drone.GroundProgram.prototype.setStaticObstaclesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.drone.StaticObstacle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.drone.StaticObstacle}
 */
proto.drone.GroundProgram.prototype.addStaticObstacles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.drone.StaticObstacle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.drone.GroundProgram} returns this
 */
proto.drone.GroundProgram.prototype.clearStaticObstaclesList = function() {
  return this.setStaticObstaclesList([]);
};


/**
 * repeated Position2D field_boundary = 3;
 * @return {!Array<!proto.drone.Position2D>}
 */
proto.drone.GroundProgram.prototype.getFieldBoundaryList = function() {
  return /** @type{!Array<!proto.drone.Position2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, drone_mission_commands_pb.Position2D, 3));
};


/**
 * @param {!Array<!proto.drone.Position2D>} value
 * @return {!proto.drone.GroundProgram} returns this
*/
proto.drone.GroundProgram.prototype.setFieldBoundaryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.drone.Position2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.drone.Position2D}
 */
proto.drone.GroundProgram.prototype.addFieldBoundary = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.drone.Position2D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.drone.GroundProgram} returns this
 */
proto.drone.GroundProgram.prototype.clearFieldBoundaryList = function() {
  return this.setFieldBoundaryList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.drone.GroundCommand.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.drone.GroundCommand.CommandCase = {
  COMMAND_NOT_SET: 0,
  WAYPOINT_COMMAND: 1,
  FLY_THROUGH_COMMAND: 2,
  UGV_DROP_COMMAND: 3,
  SURVEY_COMMAND: 4,
  OFF_AXIS_COMMAND: 5,
  WAIT_COMMAND: 6,
  LAND_AT_LOCATION_COMMAND: 7
};

/**
 * @return {proto.drone.GroundCommand.CommandCase}
 */
proto.drone.GroundCommand.prototype.getCommandCase = function() {
  return /** @type {proto.drone.GroundCommand.CommandCase} */(jspb.Message.computeOneofCase(this, proto.drone.GroundCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.GroundCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.GroundCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.GroundCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GroundCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    waypointCommand: (f = msg.getWaypointCommand()) && drone_mission_commands_pb.WaypointCommand.toObject(includeInstance, f),
    flyThroughCommand: (f = msg.getFlyThroughCommand()) && drone_mission_commands_pb.FlyThroughCommand.toObject(includeInstance, f),
    ugvDropCommand: (f = msg.getUgvDropCommand()) && proto.drone.UgvDropCommand.toObject(includeInstance, f),
    surveyCommand: (f = msg.getSurveyCommand()) && drone_mission_commands_pb.SurveyCommand.toObject(includeInstance, f),
    offAxisCommand: (f = msg.getOffAxisCommand()) && drone_mission_commands_pb.OffAxisCommand.toObject(includeInstance, f),
    waitCommand: (f = msg.getWaitCommand()) && proto.drone.WaitCommand.toObject(includeInstance, f),
    landAtLocationCommand: (f = msg.getLandAtLocationCommand()) && proto.drone.LandAtLocationCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.GroundCommand}
 */
proto.drone.GroundCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.GroundCommand;
  return proto.drone.GroundCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.GroundCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.GroundCommand}
 */
proto.drone.GroundCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new drone_mission_commands_pb.WaypointCommand;
      reader.readMessage(value,drone_mission_commands_pb.WaypointCommand.deserializeBinaryFromReader);
      msg.setWaypointCommand(value);
      break;
    case 2:
      var value = new drone_mission_commands_pb.FlyThroughCommand;
      reader.readMessage(value,drone_mission_commands_pb.FlyThroughCommand.deserializeBinaryFromReader);
      msg.setFlyThroughCommand(value);
      break;
    case 3:
      var value = new proto.drone.UgvDropCommand;
      reader.readMessage(value,proto.drone.UgvDropCommand.deserializeBinaryFromReader);
      msg.setUgvDropCommand(value);
      break;
    case 4:
      var value = new drone_mission_commands_pb.SurveyCommand;
      reader.readMessage(value,drone_mission_commands_pb.SurveyCommand.deserializeBinaryFromReader);
      msg.setSurveyCommand(value);
      break;
    case 5:
      var value = new drone_mission_commands_pb.OffAxisCommand;
      reader.readMessage(value,drone_mission_commands_pb.OffAxisCommand.deserializeBinaryFromReader);
      msg.setOffAxisCommand(value);
      break;
    case 6:
      var value = new proto.drone.WaitCommand;
      reader.readMessage(value,proto.drone.WaitCommand.deserializeBinaryFromReader);
      msg.setWaitCommand(value);
      break;
    case 7:
      var value = new proto.drone.LandAtLocationCommand;
      reader.readMessage(value,proto.drone.LandAtLocationCommand.deserializeBinaryFromReader);
      msg.setLandAtLocationCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.GroundCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.GroundCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.GroundCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.GroundCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaypointCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      drone_mission_commands_pb.WaypointCommand.serializeBinaryToWriter
    );
  }
  f = message.getFlyThroughCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      drone_mission_commands_pb.FlyThroughCommand.serializeBinaryToWriter
    );
  }
  f = message.getUgvDropCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.drone.UgvDropCommand.serializeBinaryToWriter
    );
  }
  f = message.getSurveyCommand();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      drone_mission_commands_pb.SurveyCommand.serializeBinaryToWriter
    );
  }
  f = message.getOffAxisCommand();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      drone_mission_commands_pb.OffAxisCommand.serializeBinaryToWriter
    );
  }
  f = message.getWaitCommand();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.drone.WaitCommand.serializeBinaryToWriter
    );
  }
  f = message.getLandAtLocationCommand();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.drone.LandAtLocationCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional WaypointCommand waypoint_command = 1;
 * @return {?proto.drone.WaypointCommand}
 */
proto.drone.GroundCommand.prototype.getWaypointCommand = function() {
  return /** @type{?proto.drone.WaypointCommand} */ (
    jspb.Message.getWrapperField(this, drone_mission_commands_pb.WaypointCommand, 1));
};


/**
 * @param {?proto.drone.WaypointCommand|undefined} value
 * @return {!proto.drone.GroundCommand} returns this
*/
proto.drone.GroundCommand.prototype.setWaypointCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.drone.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.GroundCommand} returns this
 */
proto.drone.GroundCommand.prototype.clearWaypointCommand = function() {
  return this.setWaypointCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GroundCommand.prototype.hasWaypointCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FlyThroughCommand fly_through_command = 2;
 * @return {?proto.drone.FlyThroughCommand}
 */
proto.drone.GroundCommand.prototype.getFlyThroughCommand = function() {
  return /** @type{?proto.drone.FlyThroughCommand} */ (
    jspb.Message.getWrapperField(this, drone_mission_commands_pb.FlyThroughCommand, 2));
};


/**
 * @param {?proto.drone.FlyThroughCommand|undefined} value
 * @return {!proto.drone.GroundCommand} returns this
*/
proto.drone.GroundCommand.prototype.setFlyThroughCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.drone.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.GroundCommand} returns this
 */
proto.drone.GroundCommand.prototype.clearFlyThroughCommand = function() {
  return this.setFlyThroughCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GroundCommand.prototype.hasFlyThroughCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UgvDropCommand ugv_drop_command = 3;
 * @return {?proto.drone.UgvDropCommand}
 */
proto.drone.GroundCommand.prototype.getUgvDropCommand = function() {
  return /** @type{?proto.drone.UgvDropCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.UgvDropCommand, 3));
};


/**
 * @param {?proto.drone.UgvDropCommand|undefined} value
 * @return {!proto.drone.GroundCommand} returns this
*/
proto.drone.GroundCommand.prototype.setUgvDropCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.drone.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.GroundCommand} returns this
 */
proto.drone.GroundCommand.prototype.clearUgvDropCommand = function() {
  return this.setUgvDropCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GroundCommand.prototype.hasUgvDropCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SurveyCommand survey_command = 4;
 * @return {?proto.drone.SurveyCommand}
 */
proto.drone.GroundCommand.prototype.getSurveyCommand = function() {
  return /** @type{?proto.drone.SurveyCommand} */ (
    jspb.Message.getWrapperField(this, drone_mission_commands_pb.SurveyCommand, 4));
};


/**
 * @param {?proto.drone.SurveyCommand|undefined} value
 * @return {!proto.drone.GroundCommand} returns this
*/
proto.drone.GroundCommand.prototype.setSurveyCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.drone.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.GroundCommand} returns this
 */
proto.drone.GroundCommand.prototype.clearSurveyCommand = function() {
  return this.setSurveyCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GroundCommand.prototype.hasSurveyCommand = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OffAxisCommand off_axis_command = 5;
 * @return {?proto.drone.OffAxisCommand}
 */
proto.drone.GroundCommand.prototype.getOffAxisCommand = function() {
  return /** @type{?proto.drone.OffAxisCommand} */ (
    jspb.Message.getWrapperField(this, drone_mission_commands_pb.OffAxisCommand, 5));
};


/**
 * @param {?proto.drone.OffAxisCommand|undefined} value
 * @return {!proto.drone.GroundCommand} returns this
*/
proto.drone.GroundCommand.prototype.setOffAxisCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.drone.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.GroundCommand} returns this
 */
proto.drone.GroundCommand.prototype.clearOffAxisCommand = function() {
  return this.setOffAxisCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GroundCommand.prototype.hasOffAxisCommand = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional WaitCommand wait_command = 6;
 * @return {?proto.drone.WaitCommand}
 */
proto.drone.GroundCommand.prototype.getWaitCommand = function() {
  return /** @type{?proto.drone.WaitCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.WaitCommand, 6));
};


/**
 * @param {?proto.drone.WaitCommand|undefined} value
 * @return {!proto.drone.GroundCommand} returns this
*/
proto.drone.GroundCommand.prototype.setWaitCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.drone.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.GroundCommand} returns this
 */
proto.drone.GroundCommand.prototype.clearWaitCommand = function() {
  return this.setWaitCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GroundCommand.prototype.hasWaitCommand = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional LandAtLocationCommand land_at_location_command = 7;
 * @return {?proto.drone.LandAtLocationCommand}
 */
proto.drone.GroundCommand.prototype.getLandAtLocationCommand = function() {
  return /** @type{?proto.drone.LandAtLocationCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.LandAtLocationCommand, 7));
};


/**
 * @param {?proto.drone.LandAtLocationCommand|undefined} value
 * @return {!proto.drone.GroundCommand} returns this
*/
proto.drone.GroundCommand.prototype.setLandAtLocationCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.drone.GroundCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.GroundCommand} returns this
 */
proto.drone.GroundCommand.prototype.clearLandAtLocationCommand = function() {
  return this.setLandAtLocationCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.GroundCommand.prototype.hasLandAtLocationCommand = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.UgvDropCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.UgvDropCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.UgvDropCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.UgvDropCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    goal: (f = msg.getGoal()) && drone_mission_commands_pb.Position3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.UgvDropCommand}
 */
proto.drone.UgvDropCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.UgvDropCommand;
  return proto.drone.UgvDropCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.UgvDropCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.UgvDropCommand}
 */
proto.drone.UgvDropCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new drone_mission_commands_pb.Position3D;
      reader.readMessage(value,drone_mission_commands_pb.Position3D.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.UgvDropCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.UgvDropCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.UgvDropCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.UgvDropCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      drone_mission_commands_pb.Position3D.serializeBinaryToWriter
    );
  }
};


/**
 * required Position3D goal = 1;
 * @return {!proto.drone.Position3D}
 */
proto.drone.UgvDropCommand.prototype.getGoal = function() {
  return /** @type{!proto.drone.Position3D} */ (
    jspb.Message.getWrapperField(this, drone_mission_commands_pb.Position3D, 1, 1));
};


/**
 * @param {!proto.drone.Position3D} value
 * @return {!proto.drone.UgvDropCommand} returns this
*/
proto.drone.UgvDropCommand.prototype.setGoal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.UgvDropCommand} returns this
 */
proto.drone.UgvDropCommand.prototype.clearGoal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.UgvDropCommand.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.WaitCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.WaitCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.WaitCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.WaitCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.WaitCommand}
 */
proto.drone.WaitCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.WaitCommand;
  return proto.drone.WaitCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.WaitCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.WaitCommand}
 */
proto.drone.WaitCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.WaitCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.WaitCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.WaitCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.WaitCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * required double time = 1;
 * @return {number}
 */
proto.drone.WaitCommand.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.drone.WaitCommand} returns this
 */
proto.drone.WaitCommand.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.WaitCommand} returns this
 */
proto.drone.WaitCommand.prototype.clearTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.WaitCommand.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.LandAtLocationCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.LandAtLocationCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.LandAtLocationCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.LandAtLocationCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    goal: (f = msg.getGoal()) && drone_mission_commands_pb.Position3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.LandAtLocationCommand}
 */
proto.drone.LandAtLocationCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.LandAtLocationCommand;
  return proto.drone.LandAtLocationCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.LandAtLocationCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.LandAtLocationCommand}
 */
proto.drone.LandAtLocationCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new drone_mission_commands_pb.Position3D;
      reader.readMessage(value,drone_mission_commands_pb.Position3D.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.LandAtLocationCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.LandAtLocationCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.LandAtLocationCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.LandAtLocationCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      drone_mission_commands_pb.Position3D.serializeBinaryToWriter
    );
  }
};


/**
 * required Position3D goal = 1;
 * @return {!proto.drone.Position3D}
 */
proto.drone.LandAtLocationCommand.prototype.getGoal = function() {
  return /** @type{!proto.drone.Position3D} */ (
    jspb.Message.getWrapperField(this, drone_mission_commands_pb.Position3D, 1, 1));
};


/**
 * @param {!proto.drone.Position3D} value
 * @return {!proto.drone.LandAtLocationCommand} returns this
*/
proto.drone.LandAtLocationCommand.prototype.setGoal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.LandAtLocationCommand} returns this
 */
proto.drone.LandAtLocationCommand.prototype.clearGoal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.LandAtLocationCommand.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.drone.DroneProgram.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.DroneProgram.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.DroneProgram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.DroneProgram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.DroneProgram.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.drone.DroneCommand.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.DroneProgram}
 */
proto.drone.DroneProgram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.DroneProgram;
  return proto.drone.DroneProgram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.DroneProgram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.DroneProgram}
 */
proto.drone.DroneProgram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.drone.DroneCommand;
      reader.readMessage(value,proto.drone.DroneCommand.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.DroneProgram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.DroneProgram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.DroneProgram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.DroneProgram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.drone.DroneCommand.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DroneCommand commands = 1;
 * @return {!Array<!proto.drone.DroneCommand>}
 */
proto.drone.DroneProgram.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.drone.DroneCommand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.drone.DroneCommand, 1));
};


/**
 * @param {!Array<!proto.drone.DroneCommand>} value
 * @return {!proto.drone.DroneProgram} returns this
*/
proto.drone.DroneProgram.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.drone.DroneCommand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.drone.DroneCommand}
 */
proto.drone.DroneProgram.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.drone.DroneCommand, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.drone.DroneProgram} returns this
 */
proto.drone.DroneProgram.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.drone.DroneCommand.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.drone.DroneCommand.CommandCase = {
  COMMAND_NOT_SET: 0,
  NOTHING_COMMAND: 1,
  SLEEP_COMMAND: 2,
  TRIGGER_BOMB_DROP_COMMAND: 3,
  TRIGGER_ALARM_COMMAND: 4,
  TRANSLATE_COMMAND: 5,
  LAND_COMMAND: 6
};

/**
 * @return {proto.drone.DroneCommand.CommandCase}
 */
proto.drone.DroneCommand.prototype.getCommandCase = function() {
  return /** @type {proto.drone.DroneCommand.CommandCase} */(jspb.Message.computeOneofCase(this, proto.drone.DroneCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.DroneCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.DroneCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.DroneCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.DroneCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    nothingCommand: (f = msg.getNothingCommand()) && drone_mission_commands_pb.NothingCommand.toObject(includeInstance, f),
    sleepCommand: (f = msg.getSleepCommand()) && drone_mission_commands_pb.SleepCommand.toObject(includeInstance, f),
    triggerBombDropCommand: (f = msg.getTriggerBombDropCommand()) && proto.drone.TriggerBombDropCommand.toObject(includeInstance, f),
    triggerAlarmCommand: (f = msg.getTriggerAlarmCommand()) && proto.drone.TriggerAlarmCommand.toObject(includeInstance, f),
    translateCommand: (f = msg.getTranslateCommand()) && proto.drone.TranslateCommand.toObject(includeInstance, f),
    landCommand: (f = msg.getLandCommand()) && proto.drone.LandCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.DroneCommand}
 */
proto.drone.DroneCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.DroneCommand;
  return proto.drone.DroneCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.DroneCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.DroneCommand}
 */
proto.drone.DroneCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new drone_mission_commands_pb.NothingCommand;
      reader.readMessage(value,drone_mission_commands_pb.NothingCommand.deserializeBinaryFromReader);
      msg.setNothingCommand(value);
      break;
    case 2:
      var value = new drone_mission_commands_pb.SleepCommand;
      reader.readMessage(value,drone_mission_commands_pb.SleepCommand.deserializeBinaryFromReader);
      msg.setSleepCommand(value);
      break;
    case 3:
      var value = new proto.drone.TriggerBombDropCommand;
      reader.readMessage(value,proto.drone.TriggerBombDropCommand.deserializeBinaryFromReader);
      msg.setTriggerBombDropCommand(value);
      break;
    case 4:
      var value = new proto.drone.TriggerAlarmCommand;
      reader.readMessage(value,proto.drone.TriggerAlarmCommand.deserializeBinaryFromReader);
      msg.setTriggerAlarmCommand(value);
      break;
    case 5:
      var value = new proto.drone.TranslateCommand;
      reader.readMessage(value,proto.drone.TranslateCommand.deserializeBinaryFromReader);
      msg.setTranslateCommand(value);
      break;
    case 6:
      var value = new proto.drone.LandCommand;
      reader.readMessage(value,proto.drone.LandCommand.deserializeBinaryFromReader);
      msg.setLandCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.DroneCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.DroneCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.DroneCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.DroneCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNothingCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      drone_mission_commands_pb.NothingCommand.serializeBinaryToWriter
    );
  }
  f = message.getSleepCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      drone_mission_commands_pb.SleepCommand.serializeBinaryToWriter
    );
  }
  f = message.getTriggerBombDropCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.drone.TriggerBombDropCommand.serializeBinaryToWriter
    );
  }
  f = message.getTriggerAlarmCommand();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.drone.TriggerAlarmCommand.serializeBinaryToWriter
    );
  }
  f = message.getTranslateCommand();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.drone.TranslateCommand.serializeBinaryToWriter
    );
  }
  f = message.getLandCommand();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.drone.LandCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional NothingCommand nothing_command = 1;
 * @return {?proto.drone.NothingCommand}
 */
proto.drone.DroneCommand.prototype.getNothingCommand = function() {
  return /** @type{?proto.drone.NothingCommand} */ (
    jspb.Message.getWrapperField(this, drone_mission_commands_pb.NothingCommand, 1));
};


/**
 * @param {?proto.drone.NothingCommand|undefined} value
 * @return {!proto.drone.DroneCommand} returns this
*/
proto.drone.DroneCommand.prototype.setNothingCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.drone.DroneCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.DroneCommand} returns this
 */
proto.drone.DroneCommand.prototype.clearNothingCommand = function() {
  return this.setNothingCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.DroneCommand.prototype.hasNothingCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SleepCommand sleep_command = 2;
 * @return {?proto.drone.SleepCommand}
 */
proto.drone.DroneCommand.prototype.getSleepCommand = function() {
  return /** @type{?proto.drone.SleepCommand} */ (
    jspb.Message.getWrapperField(this, drone_mission_commands_pb.SleepCommand, 2));
};


/**
 * @param {?proto.drone.SleepCommand|undefined} value
 * @return {!proto.drone.DroneCommand} returns this
*/
proto.drone.DroneCommand.prototype.setSleepCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.drone.DroneCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.DroneCommand} returns this
 */
proto.drone.DroneCommand.prototype.clearSleepCommand = function() {
  return this.setSleepCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.DroneCommand.prototype.hasSleepCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TriggerBombDropCommand trigger_bomb_drop_command = 3;
 * @return {?proto.drone.TriggerBombDropCommand}
 */
proto.drone.DroneCommand.prototype.getTriggerBombDropCommand = function() {
  return /** @type{?proto.drone.TriggerBombDropCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.TriggerBombDropCommand, 3));
};


/**
 * @param {?proto.drone.TriggerBombDropCommand|undefined} value
 * @return {!proto.drone.DroneCommand} returns this
*/
proto.drone.DroneCommand.prototype.setTriggerBombDropCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.drone.DroneCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.DroneCommand} returns this
 */
proto.drone.DroneCommand.prototype.clearTriggerBombDropCommand = function() {
  return this.setTriggerBombDropCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.DroneCommand.prototype.hasTriggerBombDropCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TriggerAlarmCommand trigger_alarm_command = 4;
 * @return {?proto.drone.TriggerAlarmCommand}
 */
proto.drone.DroneCommand.prototype.getTriggerAlarmCommand = function() {
  return /** @type{?proto.drone.TriggerAlarmCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.TriggerAlarmCommand, 4));
};


/**
 * @param {?proto.drone.TriggerAlarmCommand|undefined} value
 * @return {!proto.drone.DroneCommand} returns this
*/
proto.drone.DroneCommand.prototype.setTriggerAlarmCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.drone.DroneCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.DroneCommand} returns this
 */
proto.drone.DroneCommand.prototype.clearTriggerAlarmCommand = function() {
  return this.setTriggerAlarmCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.DroneCommand.prototype.hasTriggerAlarmCommand = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TranslateCommand translate_command = 5;
 * @return {?proto.drone.TranslateCommand}
 */
proto.drone.DroneCommand.prototype.getTranslateCommand = function() {
  return /** @type{?proto.drone.TranslateCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.TranslateCommand, 5));
};


/**
 * @param {?proto.drone.TranslateCommand|undefined} value
 * @return {!proto.drone.DroneCommand} returns this
*/
proto.drone.DroneCommand.prototype.setTranslateCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.drone.DroneCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.DroneCommand} returns this
 */
proto.drone.DroneCommand.prototype.clearTranslateCommand = function() {
  return this.setTranslateCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.DroneCommand.prototype.hasTranslateCommand = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LandCommand land_command = 6;
 * @return {?proto.drone.LandCommand}
 */
proto.drone.DroneCommand.prototype.getLandCommand = function() {
  return /** @type{?proto.drone.LandCommand} */ (
    jspb.Message.getWrapperField(this, proto.drone.LandCommand, 6));
};


/**
 * @param {?proto.drone.LandCommand|undefined} value
 * @return {!proto.drone.DroneCommand} returns this
*/
proto.drone.DroneCommand.prototype.setLandCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.drone.DroneCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drone.DroneCommand} returns this
 */
proto.drone.DroneCommand.prototype.clearLandCommand = function() {
  return this.setLandCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.DroneCommand.prototype.hasLandCommand = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.TranslateCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.TranslateCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.TranslateCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.TranslateCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    goal: (f = msg.getGoal()) && drone_mission_commands_pb.Position3D.toObject(includeInstance, f),
    comeToStop: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.TranslateCommand}
 */
proto.drone.TranslateCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.TranslateCommand;
  return proto.drone.TranslateCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.TranslateCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.TranslateCommand}
 */
proto.drone.TranslateCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new drone_mission_commands_pb.Position3D;
      reader.readMessage(value,drone_mission_commands_pb.Position3D.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setComeToStop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.TranslateCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.TranslateCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.TranslateCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.TranslateCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      drone_mission_commands_pb.Position3D.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required Position3D goal = 1;
 * @return {!proto.drone.Position3D}
 */
proto.drone.TranslateCommand.prototype.getGoal = function() {
  return /** @type{!proto.drone.Position3D} */ (
    jspb.Message.getWrapperField(this, drone_mission_commands_pb.Position3D, 1, 1));
};


/**
 * @param {!proto.drone.Position3D} value
 * @return {!proto.drone.TranslateCommand} returns this
*/
proto.drone.TranslateCommand.prototype.setGoal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.TranslateCommand} returns this
 */
proto.drone.TranslateCommand.prototype.clearGoal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.TranslateCommand.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool come_to_stop = 2;
 * @return {boolean}
 */
proto.drone.TranslateCommand.prototype.getComeToStop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.drone.TranslateCommand} returns this
 */
proto.drone.TranslateCommand.prototype.setComeToStop = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.drone.TranslateCommand} returns this
 */
proto.drone.TranslateCommand.prototype.clearComeToStop = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drone.TranslateCommand.prototype.hasComeToStop = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.TriggerBombDropCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.TriggerBombDropCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.TriggerBombDropCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.TriggerBombDropCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.TriggerBombDropCommand}
 */
proto.drone.TriggerBombDropCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.TriggerBombDropCommand;
  return proto.drone.TriggerBombDropCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.TriggerBombDropCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.TriggerBombDropCommand}
 */
proto.drone.TriggerBombDropCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.TriggerBombDropCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.TriggerBombDropCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.TriggerBombDropCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.TriggerBombDropCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.TriggerAlarmCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.TriggerAlarmCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.TriggerAlarmCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.TriggerAlarmCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.TriggerAlarmCommand}
 */
proto.drone.TriggerAlarmCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.TriggerAlarmCommand;
  return proto.drone.TriggerAlarmCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.TriggerAlarmCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.TriggerAlarmCommand}
 */
proto.drone.TriggerAlarmCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.TriggerAlarmCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.TriggerAlarmCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.TriggerAlarmCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.TriggerAlarmCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drone.LandCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.drone.LandCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drone.LandCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.LandCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drone.LandCommand}
 */
proto.drone.LandCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drone.LandCommand;
  return proto.drone.LandCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drone.LandCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drone.LandCommand}
 */
proto.drone.LandCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drone.LandCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drone.LandCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drone.LandCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drone.LandCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.drone);
